# apply_vat_logic.py - –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'nashsoft.settings')
django.setup()

from decimal import Decimal
from backend.models import *


def apply_vat_with_firm_logic(item, mode="from_price_without_vat"):
    """
    –ó–∞—Å—Ç–æ—Å–æ–≤—É—î –ü–î–í –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ç–∏–ø—É —Ñ—ñ—Ä–º–∏
    –§–û–ü - –±–µ–∑ –ü–î–í
    –¢–û–í/–¢–ó–û–í/–ü–ê–¢ - –∑ –ü–î–í
    """
    from backend.models import AccountingSettings

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ñ—ñ—Ä–º–∏
    firm = item.document.firm

    # –§–û–ü –Ω–µ –ø–ª–∞—Ç–∏—Ç—å –ü–î–í
    if firm.vat_type == '–§–û–ü':
        item.vat_percent = 0
        item.vat_amount = 0
        item.price_without_vat = item.price
        item.price_with_vat = item.price
        item.save(update_fields=["price_with_vat", "price_without_vat", "vat_amount", "vat_percent"])
        print(f"      üö´ –§–û–ü –ë–ï–ó –ü–î–í: {firm.name}")
        return

    # –¢–û–í/–¢–ó–û–í/–ü–ê–¢ –ø–ª–∞—Ç—è—Ç—å –ü–î–í
    if item.vat_percent is not None:
        vat = Decimal(item.vat_percent)
    else:
        try:
            settings = AccountingSettings.objects.get(company=item.document.company)
            vat = settings.default_vat_rate
            item.vat_percent = vat
        except AccountingSettings.DoesNotExist:
            vat = Decimal(20)
            item.vat_percent = vat

    price = Decimal(item.price)

    if mode == "from_price_with_vat":
        item.price_with_vat = price
        item.vat_amount = round(price * vat / (100 + vat), 2)
        item.price_without_vat = round(price - item.vat_amount, 2)
    else:
        item.price_without_vat = price
        item.vat_amount = round(price * vat / 100, 2)
        item.price_with_vat = round(price + item.vat_amount, 2)

    item.save(update_fields=["price_with_vat", "price_without_vat", "vat_amount", "vat_percent"])
    print(f"      üí∞ {firm.vat_type} –ó –ü–î–í: {firm.name} (–ü–î–í: {item.vat_amount})")


def test_complete_vat_system():
    """–ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ –ü–î–í"""
    print("üßæ –ü–û–í–ù–ò–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–ò –ü–î–í")
    print("=" * 50)

    # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ —Ñ—ñ—Ä–º–∏
    print(f"\nüìã –°–ü–ò–°–û–ö –í–°–Ü–• –§–Ü–†–ú:")
    all_firms = Firm.objects.all()
    for firm in all_firms:
        print(f"   {firm.id}. {firm.name} ({firm.vat_type})")

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ—ñ—Ä–º
    company = Company.objects.first()
    warehouse = Warehouse.objects.first()
    supplier = Supplier.objects.first()
    customer = Customer.objects.first()
    product = Product.objects.first()
    unit = Unit.objects.first()

    # –ë–µ—Ä–µ–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ñ—ñ—Ä–º–∏ –ø–æ –Ω–∞–∑–≤–∞—Ö
    firms = {}
    try:
        firms['–¢–û–í'] = Firm.objects.get(name='–¢–û–í "–ì–æ–ª–æ–≤–Ω–∞ —Ñ—ñ—Ä–º–∞"')
        print(f"   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –¢–û–í: {firms['–¢–û–í'].name}")
    except Firm.DoesNotExist:
        print(f"   ‚ùå –¢–û–í –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    try:
        firms['–§–û–ü'] = Firm.objects.get(name='–§–û–ü –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è')
        print(f"   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –§–û–ü: {firms['–§–û–ü'].name}")
    except Firm.DoesNotExist:
        print(f"   ‚ùå –§–û–ü –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    try:
        firms['–¢–ó–û–í'] = Firm.objects.get(name='–¢–ó–û–í –§—ñ–ª—ñ—è')
        print(f"   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –¢–ó–û–í: {firms['–¢–ó–û–í'].name}")
    except Firm.DoesNotExist:
        print(f"   ‚ùå –¢–ó–û–í –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    if not firms:
        print(f"‚ùå –ñ–æ–¥–Ω–æ—ó —Ñ—ñ—Ä–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è!")
        return

    results = {}

    for firm_type, firm in firms.items():
        print(f"\nüíº –¢–ï–°–¢–£–í–ê–ù–ù–Ø –§–Ü–†–ú–ò: {firm.name} ({firm_type})")

        # –ü–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è
        receipt = Document.objects.create(
            doc_type='receipt',
            doc_number=f'TEST-{firm_type}-REC',
            company=company,
            firm=firm,
            warehouse=warehouse,
            supplier=supplier
        )

        item = DocumentItem.objects.create(
            document=receipt,
            product=product,
            quantity=10,
            unit=unit,
            price=100,
            vat_percent=20
        )

        apply_vat_with_firm_logic(item)
        item.refresh_from_db()

        results[firm_type] = {
            'firm_name': firm.name,
            'vat_type': firm.vat_type,
            'price': float(item.price),
            'price_without_vat': float(item.price_without_vat),
            'vat_amount': float(item.vat_amount),
            'price_with_vat': float(item.price_with_vat),
        }

        print(f"   üì¶ –ü–û–°–¢–£–ü–õ–ï–ù–ù–Ø:")
        print(f"      –¶—ñ–Ω–∞: {item.price}")
        print(f"      –ë–µ–∑ –ü–î–í: {item.price_without_vat}")
        print(f"      –ü–î–í: {item.vat_amount}")
        print(f"      –ó –ü–î–í: {item.price_with_vat}")

        # –ü—Ä–æ–¥–∞–∂
        sale = Document.objects.create(
            doc_type='sale',
            doc_number=f'TEST-{firm_type}-SAL',
            company=company,
            firm=firm,
            warehouse=warehouse,
            customer=customer
        )

        sale_item = DocumentItem.objects.create(
            document=sale,
            product=product,
            quantity=5,
            unit=unit,
            price=150,
            vat_percent=20
        )

        apply_vat_with_firm_logic(sale_item)
        sale_item.refresh_from_db()

        print(f"   üí∞ –ü–†–û–î–ê–ñ:")
        print(f"      –¶—ñ–Ω–∞: {sale_item.price}")
        print(f"      –ü–î–í: {sale_item.vat_amount}")

        # –û—á–∏—Å—Ç–∫–∞
        receipt.delete()
        sale.delete()

    # –ü—ñ–¥—Å—É–º–æ–∫
    print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –ü–î–í –ü–û –§–Ü–†–ú–ê–•:")
    print(f"   {'–¢–∏–ø':<6} {'–ù–∞–∑–≤–∞':<25} {'–ü–î–í (–ø–æ—Å—Ç—É–ø.)':<12} {'–ü–î–í (–ø—Ä–æ–¥–∞–∂)'}")
    print(f"   {'-' * 6} {'-' * 25} {'-' * 12} {'-' * 12}")

    for firm_type, data in results.items():
        print(f"   {firm_type:<6} {data['firm_name']:<25} {data['vat_amount']:<12} –≥—Ä–Ω")

    # –í–∏—Å–Ω–æ–≤–∫–∏
    print(f"\nüîç –í–ò–°–ù–û–í–ö–ò:")
    fop_vat = results.get('–§–û–ü', {}).get('vat_amount', 0)
    tov_vat = results.get('–¢–û–í', {}).get('vat_amount', 0)

    if fop_vat == 0:
        print(f"   ‚úÖ –§–û–ü –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ù–ï –ø–ª–∞—Ç–∏—Ç—å –ü–î–í")
    else:
        print(f"   ‚ùå –§–û–ü –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–ª–∞—Ç–∏—Ç—å –ü–î–í: {fop_vat}")

    if tov_vat > 0:
        print(f"   ‚úÖ –¢–û–í –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–ª–∞—Ç–∏—Ç—å –ü–î–í: {tov_vat} –≥—Ä–Ω")
    else:
        print(f"   ‚ùå –¢–û–í –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ù–ï –ø–ª–∞—Ç–∏—Ç—å –ü–î–í")

    print(f"\n‚úÖ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–ò –ü–î–í –ó–ê–í–ï–†–®–ï–ù–û!")


if __name__ == "__main__":
    test_complete_vat_system()