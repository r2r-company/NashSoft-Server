import streamlit as st
import requests
import pandas as pd
from datetime import date

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
API_BASE = "http://127.0.0.1:8000/api"
TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzQ3Mzg0OTQ3LCJpYXQiOjE3NDY3ODAxNDcsImp0aSI6IjU2MjVjNzAwZDdmMDQ5NzY4OGFjOTQzYzc5ZGZiYjI0IiwidXNlcl9pZCI6Mn0.6P2HhhulR0SIrlhbQkZkHtJHJjr7OVmNp5rftiPKIzg"  # üîê –í—Å—Ç–∞–≤ —Å—é–¥–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω
HEADERS = {"Authorization": f"Bearer {TOKEN}"}

st.set_page_config(page_title="NashSoft Dashboard", layout="wide")
st.title("üì¶ NashSoft ‚Äì –û–±–ª—ñ–∫, –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞, –î–æ–≤—ñ–¥–Ω–∏–∫–∏")

# === –†–æ–∑–¥—ñ–ª–∏ ===
sections = {
    "–î–æ–∫—É–º–µ–Ω—Ç–∏ –æ–±–ª—ñ–∫—É": [
        ("–ü–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è", "/documents/?type=receipt"),
        ("–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è", "/documents/?type=sale"),
        ("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É", "/documents/?type=return_to_supplier"),
        ("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞", "/documents/?type=return_from_client"),
        ("–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è", "/documents/?type=transfer"),
        ("–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—è", "/documents/?type=inventory"),
        ("–û–ø—Ä–∏–±—É—Ç–∫—É–≤–∞–Ω–Ω—è", "/documents/?type=stock_in"),
    ],
    "–§—ñ–Ω–∞–Ω—Å–∏": [
        ("–ì—Ä–æ—à–æ–≤—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏", "/money-documents/"),
        ("–ì—Ä–æ—à–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó", "/money-operations/"),
        ("–ü—Ä–æ–≤–æ–¥–∫–∏", "/money-ledger/"),
        ("–ë–∞–ª–∞–Ω—Å –∫–∞—Å/–±–∞–Ω–∫—É", "/money/balance/"),
        ("–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å—å–∫–∏–π –±–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—ñ–≤", "/account-ledger-balance/"),
    ],
    "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞": [
        ("–ó–∞–ª–∏—à–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞—Ö", "/stock/warehouses/"),
        ("–ë–æ—Ä–≥–∏ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞–º", "/supplier-debts/"),
        ("–ë–∞–ª–∞–Ω—Å –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤", "/supplier-balance/"),
        ("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞", "/supplier-payments/?supplier=1"),
        ("FIFO –ø–æ —Ç–æ–≤–∞—Ä—É", "/debug/operations/1/"),
        ("–ó–≤—ñ—Ç –ø–æ –ü–î–í (—Ä–∞—Ö. 644)", "/vat-report/"),
    ],
    "–¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è": [
        ("–¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è", "/price-setting-documents/"),
    ],
    "–î–æ–≤—ñ–¥–Ω–∏–∫–∏": [
        ("–¢–æ–≤–∞—Ä–∏", "/products/"),
        ("–ì—Ä—É–ø–∏ —Ç–æ–≤–∞—Ä—ñ–≤", "/product-groups/"),
        ("–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏", "/suppliers/"),
        ("–ö–ª—ñ—î–Ω—Ç–∏", "/customers/"),
        ("–°–∫–ª–∞–¥–∏", "/warehouses/"),
        ("–ö–æ–º–ø–∞–Ω—ñ—ó", "/companies/"),
        ("–§—ñ—Ä–º–∏", "/firms/"),
        ("–í—ñ–¥–¥—ñ–ª–∏", "/departments/"),
    ],
    "–ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å": [
        ("–†–µ—î—Å—Ç—Ä –ø–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∑–æ–±–æ–≤ º—è–∑–∞–Ω—å", "/vat-obligation-report/"),
    ]
}

# === GET-–∑–∞–ø–∏—Ç
def fetch_data(endpoint):
    try:
        res = requests.get(f"{API_BASE}{endpoint}", headers=HEADERS)
        res.raise_for_status()
        return res.json()
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ {endpoint}:\n{e}")
        return []

# === Tabs –¥–ª—è —Å–µ–∫—Ü—ñ–π
tabs = st.tabs(list(sections.keys()) + ["–ö–∞–ª—å–∫—É–ª—è—Ü—ñ—è"])

# === –í–∏–≤—ñ–¥ —Å–µ–∫—Ü—ñ–π
for i, (section_title, items) in enumerate(sections.items()):
    with tabs[i]:
        for label, endpoint in items:
            st.subheader(label)

            if "vat-obligation-report" in endpoint:
                col1, col2 = st.columns(2)
                with col1:
                    start = st.date_input("–ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä—ñ–æ–¥—É", value=date.today().replace(day=1), key=f"{label}_start")
                with col2:
                    end = st.date_input("–ö—ñ–Ω–µ—Ü—å –ø–µ—Ä—ñ–æ–¥—É", value=date.today(), key=f"{label}_end")
                full_endpoint = f"{endpoint}?start={start}&end={end}"
                data = fetch_data(full_endpoint)
            else:
                data = fetch_data(endpoint)

            if isinstance(data, list) and data:
                st.dataframe(pd.DataFrame(data))
            elif isinstance(data, dict) and data:
                st.json(data)
            else:
                st.info("üîç –î–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# === –ö–∞–ª—å–∫—É–ª—è—Ü—ñ—è
with tabs[-1]:
    st.subheader("üß™ –ö–∞–ª—å–∫—É–ª—è—Ü—ñ—è (—Ç–µ—Ö–∫–∞—Ä—Ç–∞)")
    with st.form("calc_form"):
        product_id = st.number_input("ID –ø—Ä–æ–¥—É–∫—Ç—É", min_value=1, step=1)
        mode = st.selectbox("–†–µ–∂–∏–º", ["input", "output"])
        weight = st.number_input("–í–∞–≥–∞", min_value=0.01, value=1.0)
        submitted = st.form_submit_button("üîç –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏")

    if submitted:
        payload = {"product_id": product_id, "mode": mode, "weight": weight}
        try:
            res = requests.post(f"{API_BASE}/tech-calc/", json=payload, headers=HEADERS)
            res.raise_for_status()
            st.success("‚úÖ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ!")
            st.json(res.json())
        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ü—ñ—ó:\n{e}")
