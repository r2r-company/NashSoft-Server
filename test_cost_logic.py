# test_cost_logic.py
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'nashsoft.settings')
django.setup()

from decimal import Decimal
from backend.models import *
from backend.services.document_services import *
from backend.operations.stock import FIFOStockManager


def test_cost_logic():
    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ù–û–í–û–á –õ–û–ì–Ü–ö–ò –°–û–ë–Ü–í–ê–†–¢–û–°–¢–Ü")
    print("=" * 50)

    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    company, _ = Company.objects.get_or_create(name="–¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—è")
    firm, _ = Firm.objects.get_or_create(
        name="–¢–µ—Å—Ç–æ–≤–∞ —Ñ—ñ—Ä–º–∞",
        company=company,
        defaults={'vat_type': '–¢–û–í'}
    )
    warehouse, _ = Warehouse.objects.get_or_create(
        name="–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫–ª–∞–¥",
        company=company
    )
    supplier, _ = Supplier.objects.get_or_create(name="–¢–µ—Å—Ç–æ–≤–∏–π –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫")
    customer, _ = Customer.objects.get_or_create(name="–¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç")

    unit, _ = Unit.objects.get_or_create(name="—à—Ç", symbol="—à—Ç")

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏
    product1, _ = Product.objects.get_or_create(
        name="–¢–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä 1",
        firm=firm,
        defaults={'unit': unit, 'type': 'product'}
    )
    product2, _ = Product.objects.get_or_create(
        name="–¢–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä 2",
        firm=firm,
        defaults={'unit': unit, 'type': 'product'}
    )

    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ")

    # üß™ –¢–ï–°–¢ 1: –ü–û–°–¢–£–ü–õ–ï–ù–ù–Ø
    print("\nüì¶ –¢–ï–°–¢ 1: –ü–û–°–¢–£–ü–õ–ï–ù–ù–Ø")
    receipt_doc = Document.objects.create(
        doc_type='receipt',
        doc_number='TEST-001',
        company=company,
        firm=firm,
        warehouse=warehouse,
        supplier=supplier
    )

    DocumentItem.objects.create(
        document=receipt_doc,
        product=product1,
        quantity=10,
        unit=unit,
        price=100,  # –¶—ñ–Ω–∞ –∑–∞–∫—É–ø–∫–∏
        vat_percent=20
    )

    # –ü—Ä–æ–≤–æ–¥–∏–º–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è
    receipt_service = ReceiptService(receipt_doc)
    receipt_service.post()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—ó
    ops = Operation.objects.filter(document=receipt_doc)
    for op in ops:
        print(f"   –û–ø–µ—Ä–∞—Ü—ñ—è: {op.product.name}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {op.quantity}, —Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å: {op.cost_price}")

    # üß™ –¢–ï–°–¢ 2: –î–†–£–ì–ï –ü–û–°–¢–£–ü–õ–ï–ù–ù–Ø (—ñ–Ω—à–∞ —Ü—ñ–Ω–∞)
    print("\nüì¶ –¢–ï–°–¢ 2: –î–†–£–ì–ï –ü–û–°–¢–£–ü–õ–ï–ù–ù–Ø")
    receipt_doc2 = Document.objects.create(
        doc_type='receipt',
        doc_number='TEST-002',
        company=company,
        firm=firm,
        warehouse=warehouse,
        supplier=supplier
    )

    DocumentItem.objects.create(
        document=receipt_doc2,
        product=product1,
        quantity=5,
        unit=unit,
        price=120,  # –Ü–Ω—à–∞ —Ü—ñ–Ω–∞ –∑–∞–∫—É–ø–∫–∏
        vat_percent=20
    )

    receipt_service2 = ReceiptService(receipt_doc2)
    receipt_service2.post()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ª–∏—à–∫–∏
    stock = FIFOStockManager.get_available_stock(product1, warehouse, firm)
    print(f"   –ó–∞–ª–∏—à–æ–∫ —Ç–æ–≤–∞—Ä—É: {stock} —à—Ç")

    # üß™ –¢–ï–°–¢ 3: –ü–†–û–î–ê–ñ (FIFO)
    print("\nüí∞ –¢–ï–°–¢ 3: –ü–†–û–î–ê–ñ (FIFO)")

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–ø —Ü—ñ–Ω–∏ —ñ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è
    price_type, _ = PriceType.objects.get_or_create(name="–†–æ–∑–¥—Ä—ñ–±–Ω–∞", is_default=True)

    sale_doc = Document.objects.create(
        doc_type='sale',
        doc_number='TEST-003',
        company=company,
        firm=firm,
        warehouse=warehouse,
        customer=customer
    )

    DocumentItem.objects.create(
        document=sale_doc,
        product=product1,
        quantity=8,
        unit=unit,
        price=150,  # –¶—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É
        vat_percent=20
    )

    sale_service = SaleService(sale_doc)
    sale_service.post()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ–¥–∞–∂—É
    sale_ops = Operation.objects.filter(document=sale_doc, direction='out')
    total_cost = 0
    total_sale = 0
    for op in sale_ops:
        print(f"   –ü—Ä–æ–¥–∞–Ω–æ: {op.product.name}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {op.quantity}")
        print(f"   –°–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å: {op.cost_price}, –¶—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {op.sale_price}")
        print(f"   –ü—Ä–∏–±—É—Ç–æ–∫ –∑–∞ –ø–æ–∑–∏—Ü—ñ—é: {op.profit}")
        total_cost += op.total_cost
        total_sale += op.total_sale or 0

    print(f"   –ó–ê–ì–ê–õ–¨–ù–ò–ô –ü–†–ò–ë–£–¢–û–ö: {total_sale - total_cost}")

    # üß™ –¢–ï–°–¢ 4: –§–ê–°–£–í–ê–ù–ù–Ø
    print("\nüîÑ –¢–ï–°–¢ 4: –§–ê–°–£–í–ê–ù–ù–Ø")

    conversion_doc = Document.objects.create(
        doc_type='conversion',
        doc_number='TEST-004',
        company=company,
        firm=firm,
        warehouse=warehouse
    )

    # Source —Ç–æ–≤–∞—Ä (—â–æ —Ä–æ–∑–±–∏—Ä–∞—î–º–æ)
    DocumentItem.objects.create(
        document=conversion_doc,
        product=product1,
        quantity=2,  # –ó–∞–ª–∏—à–∏–ª–æ—Å—å 7, –±–µ—Ä–µ–º–æ 2
        unit=unit,
        price=0,
        role='source'
    )

    # Target —Ç–æ–≤–∞—Ä (—â–æ –æ—Ç—Ä–∏–º—É—î–º–æ)
    DocumentItem.objects.create(
        document=conversion_doc,
        product=product2,
        quantity=4,  # –û—Ç—Ä–∏–º—É—î–º–æ 4 –æ–¥ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É
        unit=unit,
        price=0,
        role='target'
    )

    conversion_service = ConversionDocumentService(conversion_doc)
    conversion_service.post()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∞—Å—É–≤–∞–Ω–Ω—è
    conversion_ops = Operation.objects.filter(document=conversion_doc)
    for op in conversion_ops:
        print(f"   {op.direction.upper()}: {op.product.name}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {op.quantity}, —Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å: {op.cost_price}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ –∑–∞–ª–∏—à–∫–∏
    print("\nüìä –§–Ü–ù–ê–õ–¨–ù–Ü –ó–ê–õ–ò–®–ö–ò:")
    stock1 = FIFOStockManager.get_available_stock(product1, warehouse, firm)
    stock2 = FIFOStockManager.get_available_stock(product2, warehouse, firm)
    value1 = FIFOStockManager.get_stock_value(product1, warehouse, firm)
    value2 = FIFOStockManager.get_stock_value(product2, warehouse, firm)

    print(f"   {product1.name}: {stock1} —à—Ç, –≤–∞—Ä—Ç—ñ—Å—Ç—å: {value1}")
    print(f"   {product2.name}: {stock2} —à—Ç, –≤–∞—Ä—Ç—ñ—Å—Ç—å: {value2}")
    print(f"   –ó–ê–ì–ê–õ–¨–ù–ê –í–ê–†–¢–Ü–°–¢–¨ –ó–ê–õ–ò–®–ö–Ü–í: {value1 + value2}")

    print("\n‚úÖ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!")


if __name__ == "__main__":
    test_cost_logic()