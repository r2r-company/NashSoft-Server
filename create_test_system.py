# create_test_system.py
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'nashsoft.settings')
django.setup()

from decimal import Decimal
from backend.models import *
from backend.services.document_services import *
from settlements.models import *
import time


def step(message):
    """–ö—Ä–∞—Å–∏–≤–∏–π –≤–∏–≤—ñ–¥ –∫—Ä–æ–∫—ñ–≤"""
    print(f"\nüîÑ {message}")
    print("   " + "‚îÄ" * (len(message) + 2))


def success(message):
    """–£—Å–ø—ñ—à–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"   ‚úÖ {message}")


def create_test_system():
    print("üöÄ –°–¢–í–û–†–ï–ù–ù–Ø –ü–û–í–ù–û–á –¢–ï–°–¢–û–í–û–á –°–ò–°–¢–ï–ú–ò")
    print("=" * 60)

    # ========== –ö–†–û–ö 1: –ë–ê–ó–û–í–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ==========
    step("–°–¢–í–û–†–ï–ù–ù–Ø –ë–ê–ó–û–í–ò–• –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨")

    # –û–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É
    units_data = [
        {'name': '—à—Ç—É–∫–∞', 'symbol': '—à—Ç'},
        {'name': '–∫—ñ–ª–æ–≥—Ä–∞–º', 'symbol': '–∫–≥'},
        {'name': '–ª—ñ—Ç—Ä', 'symbol': '–ª'},
        {'name': '–º–µ—Ç—Ä', 'symbol': '–º'},
        {'name': '—É–ø–∞–∫–æ–≤–∫–∞', 'symbol': '—É–ø–∞–∫'},
    ]

    units = {}
    for unit_data in units_data:
        unit = Unit.objects.create(**unit_data)
        units[unit_data['symbol']] = unit
        success(f"–û–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É: {unit.name}")

    # –¢–∏–ø–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤
    customer_types_data = ['–†–æ–∑–¥—Ä—ñ–±–Ω–∏–π', '–û–ø—Ç–æ–≤–∏–π', 'VIP-–∫–ª—ñ—î–Ω—Ç', '–î–∏—Å—Ç—Ä–∏–±\'—é—Ç–æ—Ä']
    customer_types = {}
    for ct_name in customer_types_data:
        ct = CustomerType.objects.create(name=ct_name)
        customer_types[ct_name] = ct
        success(f"–¢–∏–ø –∫–ª—ñ—î–Ω—Ç–∞: {ct_name}")

    # –¢–∏–ø–∏ –æ–ø–ª–∞—Ç–∏
    payment_types_data = ['–ì–æ—Ç—ñ–≤–∫–∞', '–ë–µ–∑–≥–æ—Ç—ñ–≤–∫–∞', '–ö–∞—Ä—Ç–∞', '–ó–º—ñ—à–∞–Ω–∞']
    payment_types = {}
    for pt_name in payment_types_data:
        pt = PaymentType.objects.create(name=pt_name)
        payment_types[pt_name] = pt
        success(f"–¢–∏–ø –æ–ø–ª–∞—Ç–∏: {pt_name}")

    # –¢–∏–ø–∏ —Ü—ñ–Ω
    price_types_data = [
        {'name': '–†–æ–∑–¥—Ä—ñ–±–Ω–∞', 'is_default': True},
        {'name': '–û–ø—Ç–æ–≤–∞', 'is_default': False},
        {'name': 'VIP', 'is_default': False},
        {'name': '–ê–∫—Ü—ñ–π–Ω–∞', 'is_default': False},
    ]
    price_types = {}
    for pt_data in price_types_data:
        pt = PriceType.objects.create(**pt_data)
        price_types[pt_data['name']] = pt
        success(f"–¢–∏–ø —Ü—ñ–Ω–∏: {pt_data['name']}")

    # ========== –ö–†–û–ö 2: –ö–û–ú–ü–ê–ù–Ü–á –¢–ê –°–¢–†–£–ö–¢–£–†–ê ==========
    step("–°–¢–í–û–†–ï–ù–ù–Ø –ö–û–ú–ü–ê–ù–Ü–ô –¢–ê –°–¢–†–£–ö–¢–£–†–ò")

    # –ö–æ–º–ø–∞–Ω—ñ—ó
    companies_data = [
        {'name': '–¢–û–í "–¢–µ—Å—Ç–æ–≤–∞ –¢–æ—Ä–≥—ñ–≤–ª—è"', 'tax_id': '12345678'},
        {'name': '–§–û–ü –Ü–≤–∞–Ω–µ–Ω–∫–æ –Ü.–Ü.', 'tax_id': '87654321'},
    ]

    companies = {}
    for comp_data in companies_data:
        company = Company.objects.create(**comp_data)
        companies[comp_data['name']] = company
        success(f"–ö–æ–º–ø–∞–Ω—ñ—è: {company.name}")

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±–ª—ñ–∫—É –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–º–ø–∞–Ω—ñ—ó
        AccountingSettings.objects.create(
            company=company,
            stock_account='281',
            supplier_account='631',
            vat_input_account='644',
            client_account='361',
            revenue_account='701',
            vat_output_account='641',
            default_vat_rate=Decimal('20.00'),
            default_price_type=price_types['–†–æ–∑–¥—Ä—ñ–±–Ω–∞']
        )
        success(f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±–ª—ñ–∫—É –¥–ª—è {company.name}")

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
        DocumentSettings.objects.create(
            company=company,
            receipt_prefix='REC',
            sale_prefix='SAL',
            return_to_supplier_prefix='RTS',
            return_from_client_prefix='RFC',
            transfer_prefix='TRF',
            inventory_prefix='INV',
            stock_in_prefix='STI',
            conversion_prefix='CNV'
        )
        success(f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è {company.name}")

    # –§—ñ—Ä–º–∏
    main_company = companies['–¢–û–í "–¢–µ—Å—Ç–æ–≤–∞ –¢–æ—Ä–≥—ñ–≤–ª—è"']
    firms_data = [
        {'name': '–¢–û–í "–ì–æ–ª–æ–≤–Ω–∞ —Ñ—ñ—Ä–º–∞"', 'company': main_company, 'vat_type': '–¢–û–í'},
        {'name': '–§–û–ü –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è', 'company': main_company, 'vat_type': '–§–û–ü'},
        {'name': '–¢–ó–û–í –§—ñ–ª—ñ—è', 'company': main_company, 'vat_type': '–¢–ó–û–í'},
    ]

    firms = {}
    for firm_data in firms_data:
        firm = Firm.objects.create(**firm_data)
        firms[firm_data['name']] = firm
        success(f"–§—ñ—Ä–º–∞: {firm.name}")

    # –°–∫–ª–∞–¥–∏
    warehouses_data = [
        {'name': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π —Å–∫–ª–∞–¥', 'company': main_company},
        {'name': '–†–æ–∑–¥—Ä—ñ–±–Ω–∏–π —Å–∫–ª–∞–¥', 'company': main_company},
        {'name': '–°–∫–ª–∞–¥ –≥–æ—Ç–æ–≤–æ—ó –ø—Ä–æ–¥—É–∫—Ü—ñ—ó', 'company': main_company},
        {'name': '–°–∫–ª–∞–¥ –±—Ä–∞–∫—É', 'company': main_company},
    ]

    warehouses = {}
    for wh_data in warehouses_data:
        warehouse = Warehouse.objects.create(**wh_data)
        warehouses[wh_data['name']] = warehouse
        success(f"–°–∫–ª–∞–¥: {warehouse.name}")

    # –¢–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏
    main_firm = firms['–¢–û–í "–ì–æ–ª–æ–≤–Ω–∞ —Ñ—ñ—Ä–º–∞"']
    trade_points_data = [
        {'name': '–ú–∞–≥–∞–∑–∏–Ω ‚Ññ1 (–¶–µ–Ω—Ç—Ä)', 'firm': main_firm},
        {'name': '–ú–∞–≥–∞–∑–∏–Ω ‚Ññ2 (–°–ø–∞–ª—å–Ω–∏–π —Ä–∞–π–æ–Ω)', 'firm': main_firm},
        {'name': '–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', 'firm': main_firm},
        {'name': '–û–ø—Ç–æ–≤–∏–π –≤—ñ–¥–¥—ñ–ª', 'firm': main_firm},
    ]

    trade_points = {}
    for tp_data in trade_points_data:
        tp = TradePoint.objects.create(**tp_data)
        trade_points[tp_data['name']] = tp
        success(f"–¢–æ—Ä–≥–æ–≤–∞ —Ç–æ—á–∫–∞: {tp.name}")

    # ========== –ö–†–û–ö 3: –ö–û–ù–¢–†–ê–ì–ï–ù–¢–ò ==========
    step("–°–¢–í–û–†–ï–ù–ù–Ø –ö–û–ù–¢–†–ê–ì–ï–ù–¢–Ü–í")

    # –ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏
    suppliers_data = [
        {'name': '–¢–û–í "–ü—Ä–æ–¥—É–∫—Ç–∏ –£–∫—Ä–∞—ó–Ω–∏"', 'tax_id': '11111111'},
        {'name': '–§–û–ü –ö–æ–∑–∞—á–µ–Ω–∫–æ –ú.–ú.', 'tax_id': '22222222'},
        {'name': '–¢–û–í "–ú\'—è—Å–æ–∫–æ–º–±—ñ–Ω–∞—Ç"', 'tax_id': '33333333'},
        {'name': '–•–ª—ñ–±–∑–∞–≤–æ–¥ ‚Ññ1', 'tax_id': '44444444'},
    ]

    suppliers = {}
    for supp_data in suppliers_data:
        supplier = Supplier.objects.create(**supp_data)
        suppliers[supp_data['name']] = supplier
        success(f"–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫: {supplier.name}")

    # –ö–ª—ñ—î–Ω—Ç–∏
    customers_data = [
        {'name': '–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á', 'type': customer_types['–†–æ–∑–¥—Ä—ñ–±–Ω–∏–π']},
        {'name': '–¢–û–í "–í–µ–ª–∏–∫–∏–π –û–ø—Ç–æ–≤–∏–∫"', 'type': customer_types['–û–ø—Ç–æ–≤–∏–π']},
        {'name': '–ü–µ—Ç—Ä–µ–Ω–∫–æ –ü.–ü. (VIP)', 'type': customer_types['VIP-–∫–ª—ñ—î–Ω—Ç']},
        {'name': '–¢–û–í "–ú–µ—Ä–µ–∂–∞ –º–∞–≥–∞–∑–∏–Ω—ñ–≤"', 'type': customer_types['–î–∏—Å—Ç—Ä–∏–±\'—é—Ç–æ—Ä']},
        {'name': '–°–∏–¥–æ—Ä–µ–Ω–∫–æ –°.–°.', 'type': customer_types['–†–æ–∑–¥—Ä—ñ–±–Ω–∏–π']},
    ]

    customers = {}
    for cust_data in customers_data:
        customer = Customer.objects.create(**cust_data)
        customers[cust_data['name']] = customer
        success(f"–ö–ª—ñ—î–Ω—Ç: {customer.name}")

    # ========== –ö–†–û–ö 4: –ù–û–ú–ï–ù–ö–õ–ê–¢–£–†–ê ==========
    step("–°–¢–í–û–†–ï–ù–ù–Ø –ù–û–ú–ï–ù–ö–õ–ê–¢–£–†–ò")

    # –ì—Ä—É–ø–∏ —Ç–æ–≤–∞—Ä—ñ–≤
    groups_data = [
        {'name': '–ú\'—è—Å–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏', 'parent': None},
        {'name': '–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏', 'parent': None},
        {'name': '–•–ª—ñ–±–æ–±—É–ª–æ—á–Ω—ñ –≤–∏—Ä–æ–±–∏', 'parent': None},
        {'name': '–ù–∞–ø–æ—ó', 'parent': None},
        {'name': '–°–≤–∏–Ω–∏–Ω–∞', 'parent': None},  # –ë—É–¥–µ –¥–æ—á—ñ—Ä–Ω—è –¥–æ –ú'—è—Å–Ω–∏—Ö
        {'name': '–Ø–ª–æ–≤–∏—á–∏–Ω–∞', 'parent': None},  # –ë—É–¥–µ –¥–æ—á—ñ—Ä–Ω—è –¥–æ –ú'—è—Å–Ω–∏—Ö
    ]

    groups = {}
    for group_data in groups_data:
        group = ProductGroup.objects.create(**group_data)
        groups[group_data['name']] = group
        success(f"–ì—Ä—É–ø–∞ —Ç–æ–≤–∞—Ä—ñ–≤: {group.name}")

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±–∞—Ç—å–∫—ñ–≤ –¥–ª—è –¥–æ—á—ñ—Ä–Ω—ñ—Ö –≥—Ä—É–ø
    groups['–°–≤–∏–Ω–∏–Ω–∞'].parent = groups['–ú\'—è—Å–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏']
    groups['–°–≤–∏–Ω–∏–Ω–∞'].save()
    groups['–Ø–ª–æ–≤–∏—á–∏–Ω–∞'].parent = groups['–ú\'—è—Å–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏']
    groups['–Ø–ª–æ–≤–∏—á–∏–Ω–∞'].save()
    success("–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —ñ—î—Ä–∞—Ä—Ö—ñ—é –≥—Ä—É–ø —Ç–æ–≤–∞—Ä—ñ–≤")

    # –¢–æ–≤–∞—Ä–∏
    products_data = [
        {'name': '–§–∞—Ä—à —Å–≤–∏–Ω—è—á–∏–π', 'group': groups['–°–≤–∏–Ω–∏–Ω–∞'], 'unit': units['–∫–≥'], 'type': 'product'},
        {'name': '–û–∫–æ—Ä–æ–∫ —Å–≤–∏–Ω—è—á–∏–π', 'group': groups['–°–≤–∏–Ω–∏–Ω–∞'], 'unit': units['–∫–≥'], 'type': 'product'},
        {'name': '–ú–æ–ª–æ–∫–æ 2.5%', 'group': groups['–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏'], 'unit': units['–ª'], 'type': 'product'},
        {'name': '–°–∏—Ä —Ç–≤–µ—Ä–¥–∏–π', 'group': groups['–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏'], 'unit': units['–∫–≥'], 'type': 'product'},
        {'name': '–•–ª—ñ–± –±—ñ–ª–∏–π', 'group': groups['–•–ª—ñ–±–æ–±—É–ª–æ—á–Ω—ñ –≤–∏—Ä–æ–±–∏'], 'unit': units['—à—Ç'], 'type': 'product'},
        {'name': '–ë—É–ª–æ—á–∫–∞ –∑ –º–∞–∫–æ–º', 'group': groups['–•–ª—ñ–±–æ–±—É–ª–æ—á–Ω—ñ –≤–∏—Ä–æ–±–∏'], 'unit': units['—à—Ç'], 'type': 'product'},
        {'name': '–í–æ–¥–∞ –º—ñ–Ω–µ—Ä–∞–ª—å–Ω–∞', 'group': groups['–ù–∞–ø–æ—ó'], 'unit': units['–ª'], 'type': 'product'},
        {'name': '–°—ñ–∫ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤–∏–π', 'group': groups['–ù–∞–ø–æ—ó'], 'unit': units['–ª'], 'type': 'product'},
        {'name': '–ö–æ—Ç–ª–µ—Ç–∞ –¥–æ–º–∞—à–Ω—è', 'group': groups['–ú\'—è—Å–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏'], 'unit': units['—à—Ç'], 'type': 'semi'},
        {'name': '–°—ñ–∫ —Å–≤—ñ–∂–æ–≤–∏—á–∞–≤–ª–µ–Ω–∏–π', 'group': groups['–ù–∞–ø–æ—ó'], 'unit': units['–ª'], 'type': 'semi'},
    ]

    products = {}
    for prod_data in products_data:
        prod_data['firm'] = main_firm
        product = Product.objects.create(**prod_data)
        products[prod_data['name']] = product
        success(f"–¢–æ–≤–∞—Ä: {product.name} ({product.get_type_display()})")

    # –ö–æ–Ω–≤–µ—Ä—Å—ñ—ó –æ–¥–∏–Ω–∏—Ü—å (–ø—Ä–∏–∫–ª–∞–¥–∏)
    conversions_data = [
        {'product': products['–ú–æ–ª–æ–∫–æ 2.5%'], 'from_unit': units['–ª'], 'to_unit': units['—à—Ç'], 'factor': Decimal('1.0')},
        # 1–ª = 1 –ø–∞–∫–µ—Ç
        {'product': products['–°–∏—Ä —Ç–≤–µ—Ä–¥–∏–π'], 'from_unit': units['–∫–≥'], 'to_unit': units['—É–ø–∞–∫'],
         'factor': Decimal('0.5')},  # 1–∫–≥ = 0.5 —É–ø–∞–∫
    ]

    for conv_data in conversions_data:
        ProductUnitConversion.objects.create(**conv_data)
        success(
            f"–ö–æ–Ω–≤–µ—Ä—Å—ñ—è: {conv_data['product'].name} ({conv_data['from_unit'].symbol} ‚Üí {conv_data['to_unit'].symbol})")

    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –°–¢–í–û–†–ï–ù–ù–Ø –°–¢–†–£–ö–¢–£–†–ò:")
    print(f"   üè¢ –ö–æ–º–ø–∞–Ω—ñ–π: {Company.objects.count()}")
    print(f"   üè≠ –§—ñ—Ä–º: {Firm.objects.count()}")
    print(f"   üì¶ –°–∫–ª–∞–¥—ñ–≤: {Warehouse.objects.count()}")
    print(f"   üè™ –¢–æ—Ä–≥–æ–≤–∏—Ö —Ç–æ—á–æ–∫: {TradePoint.objects.count()}")
    print(f"   ü§ù –ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤: {Supplier.objects.count()}")
    print(f"   üë• –ö–ª—ñ—î–Ω—Ç—ñ–≤: {Customer.objects.count()}")
    print(f"   üìã –¢–æ–≤–∞—Ä—ñ–≤: {Product.objects.count()}")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∫—Ä–æ–∫—ñ–≤
    return {
        'main_company': main_company,
        'main_firm': main_firm,
        'main_warehouse': warehouses['–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π —Å–∫–ª–∞–¥'],
        'retail_warehouse': warehouses['–†–æ–∑–¥—Ä—ñ–±–Ω–∏–π —Å–∫–ª–∞–¥'],
        'main_supplier': suppliers['–¢–û–í "–ü—Ä–æ–¥—É–∫—Ç–∏ –£–∫—Ä–∞—ó–Ω–∏"'],
        'retail_customer': customers['–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á'],
        'wholesale_customer': customers['–¢–û–í "–í–µ–ª–∏–∫–∏–π –û–ø—Ç–æ–≤–∏–∫"'],
        'products': products,
        'units': units,
        'price_types': price_types,
        'trade_points': trade_points,
    }


if __name__ == "__main__":
    create_test_system()