# create_test_operations_fixed.py
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'nashsoft.settings')
django.setup()

from decimal import Decimal
from backend.models import *
from backend.services.document_services import *
from settlements.models import *


def step(message):
    print(f"\nüîÑ {message}")
    print("   " + "‚îÄ" * (len(message) + 2))


def success(message):
    print(f"   ‚úÖ {message}")


def info(message):
    print(f"   ‚ÑπÔ∏è  {message}")


def create_test_operations():
    print("üìã –°–¢–í–û–†–ï–ù–ù–Ø –¢–ï–°–¢–û–í–ò–• –û–ü–ï–†–ê–¶–Ü–ô (–í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø)")
    print("=" * 60)

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –æ–±'—î–∫—Ç–∏ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
    try:
        main_company = Company.objects.get(name='–¢–û–í "–¢–µ—Å—Ç–æ–≤–∞ –¢–æ—Ä–≥—ñ–≤–ª—è"')
        main_firm = Firm.objects.get(name='–¢–û–í "–ì–æ–ª–æ–≤–Ω–∞ —Ñ—ñ—Ä–º–∞"')
        central_warehouse = Warehouse.objects.get(name='–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π —Å–∫–ª–∞–¥')
        retail_warehouse = Warehouse.objects.get(name='–†–æ–∑–¥—Ä—ñ–±–Ω–∏–π —Å–∫–ª–∞–¥')

        main_supplier = Supplier.objects.get(name='–¢–û–í "–ü—Ä–æ–¥—É–∫—Ç–∏ –£–∫—Ä–∞—ó–Ω–∏"')
        meat_supplier = Supplier.objects.get(name='–¢–û–í "–ú\'—è—Å–æ–∫–æ–º–±—ñ–Ω–∞—Ç"')

        retail_customer = Customer.objects.get(name='–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á')
        wholesale_customer = Customer.objects.get(name='–¢–û–í "–í–µ–ª–∏–∫–∏–π –û–ø—Ç–æ–≤–∏–∫"')

        price_type_retail = PriceType.objects.get(name='–†–æ–∑–¥—Ä—ñ–±–Ω–∞')
        price_type_wholesale = PriceType.objects.get(name='–û–ø—Ç–æ–≤–∞')

        trade_point_1 = TradePoint.objects.get(name='–ú–∞–≥–∞–∑–∏–Ω ‚Ññ1 (–¶–µ–Ω—Ç—Ä)')
        trade_point_2 = TradePoint.objects.get(name='–ú–∞–≥–∞–∑–∏–Ω ‚Ññ2 (–°–ø–∞–ª—å–Ω–∏–π —Ä–∞–π–æ–Ω)')
        wholesale_point = TradePoint.objects.get(name='–û–ø—Ç–æ–≤–∏–π –≤—ñ–¥–¥—ñ–ª')

        # –û–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É –∑ –∑–∞—Ö–∏—Å—Ç–æ–º –≤—ñ–¥ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        unit_kg = Unit.objects.filter(symbol='–∫–≥').first()
        unit_sht = Unit.objects.filter(symbol='—à—Ç').first()
        unit_l = Unit.objects.filter(symbol='–ª').first()

        if not unit_kg or not unit_sht or not unit_l:
            raise Exception("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É!")

        info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–≤—ñ–¥–Ω–∏–∫–∏")

    except Exception as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {e}")
        print("üí° –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å: python create_test_system.py")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä–∏
    products = {}
    product_names = [
        '–§–∞—Ä—à —Å–≤–∏–Ω—è—á–∏–π', '–û–∫–æ—Ä–æ–∫ —Å–≤–∏–Ω—è—á–∏–π', '–ú–æ–ª–æ–∫–æ 2.5%', '–°–∏—Ä —Ç–≤–µ—Ä–¥–∏–π',
        '–•–ª—ñ–± –±—ñ–ª–∏–π', '–ë—É–ª–æ—á–∫–∞ –∑ –º–∞–∫–æ–º', '–í–æ–¥–∞ –º—ñ–Ω–µ—Ä–∞–ª—å–Ω–∞', '–°—ñ–∫ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤–∏–π',
        '–ö–æ—Ç–ª–µ—Ç–∞ –¥–æ–º–∞—à–Ω—è'
    ]

    for name in product_names:
        try:
            products[name.lower().split()[0]] = Product.objects.get(name=name)
        except Product.DoesNotExist:
            print(f"‚ùå –¢–æ–≤–∞—Ä '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return

    # ========== –¶–Ü–ù–û–£–¢–í–û–†–ï–ù–ù–Ø ==========
    step("–°–¢–í–û–†–ï–ù–ù–Ø –¶–Ü–ù–û–£–¢–í–û–†–ï–ù–ù–Ø")

    # –†–æ–∑–¥—Ä—ñ–±–Ω—ñ —Ü—ñ–Ω–∏
    retail_price_doc = PriceSettingDocument.objects.create(
        doc_number='PRICE-RETAIL-001',
        company=main_company,
        firm=main_firm,
        valid_from='2025-01-01',
        status='approved'
    )
    retail_price_doc.trade_points.add(trade_point_1, trade_point_2)

    retail_prices = [
        {'product': products['—Ñ–∞—Ä—à'], 'price': 180, 'unit': unit_kg},
        {'product': products['–æ–∫–æ—Ä–æ–∫'], 'price': 220, 'unit': unit_kg},
        {'product': products['–º–æ–ª–æ–∫–æ'], 'price': 35, 'unit': unit_l},
        {'product': products['—Å–∏—Ä'], 'price': 280, 'unit': unit_kg},
        {'product': products['—Ö–ª—ñ–±'], 'price': 25, 'unit': unit_sht},
        {'product': products['–±—É–ª–æ—á–∫–∞'], 'price': 15, 'unit': unit_sht},
        {'product': products['–≤–æ–¥–∞'], 'price': 12, 'unit': unit_l},
        {'product': products['—Å—ñ–∫'], 'price': 45, 'unit': unit_l},
        {'product': products['–∫–æ—Ç–ª–µ—Ç–∞'], 'price': 8, 'unit': unit_sht},
    ]

    for price_data in retail_prices:
        for tp in [trade_point_1, trade_point_2]:
            PriceSettingItem.objects.create(
                price_setting_document=retail_price_doc,
                product=price_data['product'],
                price_type=price_type_retail,
                trade_point=tp,
                firm=main_firm,
                price=price_data['price'],
                unit=price_data['unit'],
                vat_percent=20
            )
        success(f"–†–æ–∑–¥—Ä—ñ–±–Ω–∞ —Ü—ñ–Ω–∞: {price_data['product'].name} - {price_data['price']} –≥—Ä–Ω")

    # ========== –ü–û–°–¢–£–ü–õ–ï–ù–ù–Ø ==========
    step("–°–¢–í–û–†–ï–ù–ù–Ø –ü–û–°–¢–£–ü–õ–ï–ù–¨")

    # –ü–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è 1
    receipt_doc1 = Document.objects.create(
        doc_type='receipt',
        doc_number='REC-001',
        company=main_company,
        firm=main_firm,
        warehouse=central_warehouse,
        supplier=main_supplier
    )

    receipt1_items = [
        {'product': products['—Ñ–∞—Ä—à'], 'qty': 50, 'cost': 120, 'unit': unit_kg},
        {'product': products['–º–æ–ª–æ–∫–æ'], 'qty': 100, 'cost': 22, 'unit': unit_l},
        {'product': products['—Ö–ª—ñ–±'], 'qty': 200, 'cost': 12, 'unit': unit_sht},
    ]

    for item_data in receipt1_items:
        DocumentItem.objects.create(
            document=receipt_doc1,
            product=item_data['product'],
            quantity=item_data['qty'],
            unit=item_data['unit'],
            price=item_data['cost'],
            vat_percent=20
        )

    ReceiptService(receipt_doc1).post()
    success(f"–ü–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è {receipt_doc1.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

    # ========== –ü–†–û–î–ê–ñ–Ü ==========
    step("–°–¢–í–û–†–ï–ù–ù–Ø –ü–†–û–î–ê–ñ–Ü–í")

    sale_doc1 = Document.objects.create(
        doc_type='sale',
        doc_number='SAL-001',
        company=main_company,
        firm=main_firm,
        warehouse=central_warehouse,
        customer=retail_customer
    )

    sale1_items = [
        {'product': products['–º–æ–ª–æ–∫–æ'], 'qty': 20, 'price': 35, 'unit': unit_l},
        {'product': products['—Ö–ª—ñ–±'], 'qty': 50, 'price': 25, 'unit': unit_sht},
    ]

    for item_data in sale1_items:
        DocumentItem.objects.create(
            document=sale_doc1,
            product=item_data['product'],
            quantity=item_data['qty'],
            unit=item_data['unit'],
            price=item_data['price'],
            vat_percent=20
        )

    SaleService(sale_doc1).post()
    success(f"–ü—Ä–æ–¥–∞–∂ {sale_doc1.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

    # ========== –§–ê–°–£–í–ê–ù–ù–Ø (–í–ò–ü–†–ê–í–õ–ï–ù–ï!) ==========
    step("–°–¢–í–û–†–ï–ù–ù–Ø –§–ê–°–£–í–ê–ù–ù–Ø")

    conversion_doc = Document.objects.create(
        doc_type='conversion',
        doc_number='CNV-001',
        company=main_company,
        firm=main_firm,
        warehouse=central_warehouse
    )

    # Source: 5 –∫–≥ —Ñ–∞—Ä—à—É (–î–û–î–ê–ù–ê –¶–Ü–ù–ê!)
    DocumentItem.objects.create(
        document=conversion_doc,
        product=products['—Ñ–∞—Ä—à'],
        quantity=5,
        unit=unit_kg,
        price=120,  # ‚¨ÖÔ∏è –î–û–î–ê–ù–ê –¶–Ü–ù–ê!
        vat_percent=20,
        role='source'
    )

    # Target: 25 –∫–æ—Ç–ª–µ—Ç (–î–û–î–ê–ù–ê –¶–Ü–ù–ê!)
    DocumentItem.objects.create(
        document=conversion_doc,
        product=products['–∫–æ—Ç–ª–µ—Ç–∞'],
        quantity=25,
        unit=unit_sht,
        price=0,  # ‚¨ÖÔ∏è –ë–£–î–ï –†–û–ó–†–ê–•–û–í–ê–ù–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û
        vat_percent=20,
        role='target'
    )

    ConversionDocumentService(conversion_doc).post()
    success(f"–§–∞—Å—É–≤–∞–Ω–Ω—è {conversion_doc.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

    # ========== –ü–Ü–î–°–£–ú–û–ö ==========
    print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö:")
    print(f"   üì¶ –ü–æ—Å—Ç—É–ø–ª–µ–Ω—å: {Document.objects.filter(doc_type='receipt').count()}")
    print(f"   üí∞ –ü—Ä–æ–¥–∞–∂—ñ–≤: {Document.objects.filter(doc_type='sale').count()}")
    print(f"   üè≠ –§–∞—Å—É–≤–∞–Ω—å: {Document.objects.filter(doc_type='conversion').count()}")
    print(f"   üìà –û–ø–µ—Ä–∞—Ü—ñ–π: {Operation.objects.count()}")

    # –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–ª–∏—à–∫–∏
    print(f"\nüìã –ó–ê–õ–ò–®–ö–ò:")
    from backend.operations.stock import FIFOStockManager

    for key, product in products.items():
        if key in ['—Ñ–∞—Ä—à', '–º–æ–ª–æ–∫–æ', '—Ö–ª—ñ–±', '–∫–æ—Ç–ª–µ—Ç–∞']:
            stock = FIFOStockManager.get_available_stock(product, central_warehouse, main_firm)
            if stock > 0:
                value = FIFOStockManager.get_stock_value(product, central_warehouse, main_firm)
                avg_cost = value / stock if stock > 0 else 0
                print(
                    f"   {product.name}: {stock} {product.unit.symbol}, –≤–∞—Ä—Ç—ñ—Å—Ç—å {value:.2f}, —Å–µ—Ä.—Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å {avg_cost:.2f}")


if __name__ == "__main__":
    create_test_operations()