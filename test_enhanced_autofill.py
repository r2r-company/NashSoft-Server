# test_enhanced_autofill.py
# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ PriceAutoFillService

import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'nashsoft.settings')
django.setup()

from decimal import Decimal
from django.db.models import Q  # ‚úÖ –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç Q
from backend.models import *
from backend.services.price import PriceAutoFillService


def test_enhanced_autofill():
    print("üöÄ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–û–ö–†–ê–©–ï–ù–û–ì–û –ê–í–¢–û–ó–ê–ü–û–í–ù–ï–ù–ù–Ø")
    print("=" * 60)

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    try:
        company = Company.objects.first()
        fop_firm = Firm.objects.filter(vat_type='–§–û–ü').first()
        tov_firm = Firm.objects.filter(vat_type='–¢–ó–û–í').first()

        if not all([company, fop_firm, tov_firm]):
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö. –ó–∞–ø—É—Å—Ç—ñ—Ç—å create_business_scenario.py")
            return

        print(f"‚úÖ –ö–æ–º–ø–∞–Ω—ñ—è: {company.name}")
        print(f"‚úÖ –§–û–ü: {fop_firm.name}")
        print(f"‚úÖ –¢–ó–û–í: {tov_firm.name}")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
        return

    # ========== –¢–ï–°–¢ 1: –ê–í–¢–û–ó–ê–ü–û–í–ù–ï–ù–ù–Ø –ù–ê –û–°–ù–û–í–Ü –ü–û–°–¢–£–ü–õ–ï–ù–ù–Ø –§–û–ü ==========
    print(f"\nüìã –¢–ï–°–¢ 1: –ê–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –§–û–ü")

    try:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –§–û–ü
        fop_receipt = Document.objects.filter(
            doc_type='receipt',
            firm=fop_firm,
            status='posted'
        ).first()

        if not fop_receipt:
            print("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –§–û–ü –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {fop_receipt.doc_number}")

        # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ
        print(f"üì¶ –¢–æ–≤–∞—Ä–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ:")
        for item in fop_receipt.items.all():
            print(f"   ‚Ä¢ {item.product.name}: {item.quantity} x {item.price} = {item.quantity * item.price}")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è
        fop_price_doc = PriceSettingDocument.objects.create(
            company=company,
            firm=fop_firm,
            valid_from='2025-01-20',
            base_type='receipt',
            base_receipt=fop_receipt,
            status='draft'
        )

        # –î–æ–¥–∞—î–º–æ —Ç–æ—Ä–≥–æ–≤—É —Ç–æ—á–∫—É
        fop_trade_point = TradePoint.objects.filter(firm=fop_firm).first()
        if fop_trade_point:
            fop_price_doc.trade_points.add(fop_trade_point)

        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: {fop_price_doc.doc_number}")

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
        service = PriceAutoFillService(fop_price_doc)
        items_created = service.fill_items()

        print(f"üéØ –°—Ç–≤–æ—Ä–µ–Ω–æ {items_created} –ø–æ–∑–∏—Ü—ñ–π –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º–∏ —Ü—ñ–Ω–∞–º–∏")

        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"üí∞ –†–û–ó–†–ê–•–û–í–ê–ù–Ü –¶–Ü–ù–ò (–§–û–ü –ë–ï–ó –ü–î–í):")
        for item in fop_price_doc.items.all():
            receipt_item = fop_receipt.items.filter(product=item.product).first()
            base_cost = receipt_item.price if receipt_item else 0

            print(f"   ‚Ä¢ {item.product.name}:")
            print(f"     –°–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å: {base_cost} –≥—Ä–Ω")
            print(f"     –ù–∞—Ü—ñ–Ω–∫–∞: {item.markup_percent}%")
            print(f"     –ü—Ä–æ–¥–∞–∂–Ω–∞ —Ü—ñ–Ω–∞: {item.price} –≥—Ä–Ω")
            print(f"     –ü–î–í: {item.vat_amount} –≥—Ä–Ω (—Å—Ç–∞–≤–∫–∞: {item.vat_percent}%)")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ –§–û–ü: {e}")

    # ========== –¢–ï–°–¢ 2: –ê–í–¢–û–ó–ê–ü–û–í–ù–ï–ù–ù–Ø –ù–ê –û–°–ù–û–í–Ü –ü–û–°–¢–£–ü–õ–ï–ù–ù–Ø –¢–ó–û–í ==========
    print(f"\nüìã –¢–ï–°–¢ 2: –ê–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –¢–ó–û–í")

    try:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –¢–ó–û–í
        tov_receipt = Document.objects.filter(
            doc_type='receipt',
            firm=tov_firm,
            status='posted'
        ).first()

        if not tov_receipt:
            print("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è –¢–ó–û–í –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {tov_receipt.doc_number}")

        # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ
        print(f"üì¶ –¢–æ–≤–∞—Ä–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ:")
        for item in tov_receipt.items.all():
            print(f"   ‚Ä¢ {item.product.name}: {item.quantity} x {item.price}")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è
        tov_price_doc = PriceSettingDocument.objects.create(
            company=company,
            firm=tov_firm,
            valid_from='2025-01-20',
            base_type='receipt',
            base_receipt=tov_receipt,
            status='draft'
        )

        # –î–æ–¥–∞—î–º–æ —Ç–æ—Ä–≥–æ–≤—É —Ç–æ—á–∫—É
        tov_trade_point = TradePoint.objects.filter(firm=tov_firm).first()
        if tov_trade_point:
            tov_price_doc.trade_points.add(tov_trade_point)

        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: {tov_price_doc.doc_number}")

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
        service = PriceAutoFillService(tov_price_doc)
        items_created = service.fill_items()

        print(f"üéØ –°—Ç–≤–æ—Ä–µ–Ω–æ {items_created} –ø–æ–∑–∏—Ü—ñ–π –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º–∏ —Ü—ñ–Ω–∞–º–∏")

        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"üí∞ –†–û–ó–†–ê–•–û–í–ê–ù–Ü –¶–Ü–ù–ò (–¢–ó–û–í –ó –ü–î–í):")
        for item in tov_price_doc.items.all():
            receipt_item = tov_receipt.items.filter(product=item.product).first()
            base_cost = receipt_item.price_without_vat if receipt_item else 0

            print(f"   ‚Ä¢ {item.product.name}:")
            print(f"     –°–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å: {base_cost} –≥—Ä–Ω (–±–µ–∑ –ü–î–í)")
            print(f"     –ù–∞—Ü—ñ–Ω–∫–∞: {item.markup_percent}%")
            print(f"     –¶—ñ–Ω–∞ –±–µ–∑ –ü–î–í: {item.price_without_vat} –≥—Ä–Ω")
            print(f"     –ü–î–í: {item.vat_amount} –≥—Ä–Ω")
            print(f"     –¶—ñ–Ω–∞ –ó –ü–î–í: {item.price} –≥—Ä–Ω")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ –¢–ó–û–í: {e}")

    # ========== –¢–ï–°–¢ 3: –ê–í–¢–û–ó–ê–ü–û–í–ù–ï–ù–ù–Ø –ù–ê –û–°–ù–û–í–Ü –ì–†–£–ü–ò ==========
    print(f"\nüìã –¢–ï–°–¢ 3: –ê–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≥—Ä—É–ø–∏ —Ç–æ–≤–∞—Ä—ñ–≤")

    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –∑–Ω–∞—Ö–æ–¥–∏–º–æ –≥—Ä—É–ø—É
        alcohol_group, created = ProductGroup.objects.get_or_create(
            name='–ê–ª–∫–æ–≥–æ–ª—å–Ω—ñ –Ω–∞–ø–æ—ó'
        )

        # –ü—Ä–∏–≤'—è–∑—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –¥–æ –≥—Ä—É–ø–∏
        alcohol_products = Product.objects.filter(
            Q(name__icontains='–≤—ñ—Å–∫—ñ') | Q(name__icontains='–∫–æ–Ω—å—è–∫'),
            firm=tov_firm
        )

        if alcohol_products.exists():
            alcohol_products.update(group=alcohol_group)
            print(f"üìÇ –ì—Ä—É–ø–∞: {alcohol_group.name}")
            print(f"üì¶ –¢–æ–≤–∞—Ä—ñ–≤ —É –≥—Ä—É–ø—ñ: {alcohol_products.count()}")

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≥—Ä—É–ø–∏
            group_price_doc = PriceSettingDocument.objects.create(
                company=company,
                firm=tov_firm,
                valid_from='2025-01-21',
                base_type='product_group',
                base_group=alcohol_group,
                status='draft'
            )

            # –î–æ–¥–∞—î–º–æ —Ç–æ—Ä–≥–æ–≤—É —Ç–æ—á–∫—É
            if tov_trade_point:
                group_price_doc.trade_points.add(tov_trade_point)

            print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: {group_price_doc.doc_number}")

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
            service = PriceAutoFillService(group_price_doc)
            items_created = service.fill_items()

            print(f"üéØ –°—Ç–≤–æ—Ä–µ–Ω–æ {items_created} –ø–æ–∑–∏—Ü—ñ–π")

            # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print(f"üí∞ –¶–Ü–ù–ò –ü–û –ì–†–£–ü–Ü '–ê–õ–ö–û–ì–û–õ–¨':")
            for item in group_price_doc.items.all():
                print(f"   ‚Ä¢ {item.product.name}: {item.price} –≥—Ä–Ω (–Ω–∞—Ü—ñ–Ω–∫–∞: {item.markup_percent}%)")

        else:
            print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–ª–∫–æ–≥–æ–ª—å–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –≥—Ä—É–ø–∏")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ –≥—Ä—É–ø–∏: {e}")

    # ========== –ü–Ü–î–°–£–ú–û–ö ==========
    print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")

    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è
    all_price_docs = PriceSettingDocument.objects.filter(
        company=company,
        valid_from__gte='2025-01-20'
    )

    print(f"üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è: {all_price_docs.count()}")

    total_items = 0
    for doc in all_price_docs:
        items_count = doc.items.count()
        total_items += items_count
        print(f"   ‚Ä¢ {doc.doc_number}: {items_count} –ø–æ–∑–∏—Ü—ñ–π (–æ—Å–Ω–æ–≤–∞: {doc.get_base_type_display()})")

    print(f"üì¶ –í—Å—å–æ–≥–æ –ø–æ–∑–∏—Ü—ñ–π —Å—Ç–≤–æ—Ä–µ–Ω–æ: {total_items}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–≥—ñ–∫—É –Ω–∞—Ü—ñ–Ω–æ–∫
    print(f"\nüéØ –ü–ï–†–ï–í–Ü–†–ö–ê –õ–û–ì–Ü–ö–ò –ù–ê–¶–Ü–ù–û–ö:")

    meat_items = PriceSettingItem.objects.filter(
        product__name__icontains='—Ñ–∞—Ä—à',
        price_setting_document__in=all_price_docs
    )

    alcohol_items = PriceSettingItem.objects.filter(
        Q(product__name__icontains='–≤—ñ—Å–∫—ñ') | Q(product__name__icontains='–∫–æ–Ω—å—è–∫'),
        price_setting_document__in=all_price_docs
    )

    if meat_items.exists():
        meat_item = meat_items.first()
        print(f"   ü•© –ú'—è—Å–æ: –Ω–∞—Ü—ñ–Ω–∫–∞ {meat_item.markup_percent}% (–æ—á—ñ–∫—É—î–º–æ 400%)")

    if alcohol_items.exists():
        alcohol_item = alcohol_items.first()
        print(f"   ü•É –ê–ª–∫–æ–≥–æ–ª—å: –Ω–∞—Ü—ñ–Ω–∫–∞ {alcohol_item.markup_percent}% (–æ—á—ñ–∫—É—î–º–æ 180%)")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ü–î–í
    print(f"\nüßæ –ü–ï–†–ï–í–Ü–†–ö–ê –ü–î–í:")

    fop_items = PriceSettingItem.objects.filter(
        firm__vat_type='–§–û–ü',
        price_setting_document__in=all_price_docs
    )

    tov_items = PriceSettingItem.objects.filter(
        firm__vat_type='–¢–ó–û–í',
        price_setting_document__in=all_price_docs
    )

    if fop_items.exists():
        fop_vat = fop_items.first().vat_percent
        print(f"   –§–û–ü: –ü–î–í {fop_vat}% (–æ—á—ñ–∫—É—î–º–æ 0%)")

    if tov_items.exists():
        tov_vat = tov_items.first().vat_percent
        print(f"   –¢–ó–û–í: –ü–î–í {tov_vat}% (–æ—á—ñ–∫—É—î–º–æ 20%)")

    print(f"\n‚úÖ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üéâ –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π PriceAutoFillService –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")


if __name__ == "__main__":
    test_enhanced_autofill()