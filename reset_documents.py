# clear_documents_smart.py - —Ä–æ–∑—É–º–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'nashsoft.settings')
django.setup()

from django.db import connection, transaction
from django.db.models.signals import pre_delete, post_delete
from backend.models import *
from settlements.models import *


def disable_all_signals():
    """–í—ñ–¥–∫–ª—é—á–∞—î –≤—Å—ñ –∑–∞—Ö–∏—Å–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏"""
    from backend import signals

    disabled_signals = []

    # –í—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π
    try:
        pre_delete.disconnect(signals.prevent_delete_operation_if_used, sender=Operation)
        disabled_signals.append(('operation_protection', signals.prevent_delete_operation_if_used, Operation))
        print("   ‚úÖ –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –∑–∞—Ö–∏—Å—Ç –æ–ø–µ—Ä–∞—Ü—ñ–π")
    except Exception:
        pass

    # –í—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
    try:
        pre_delete.disconnect(signals.prevent_delete_posted_document, sender=Document)
        disabled_signals.append(('document_protection', signals.prevent_delete_posted_document, Document))
        print("   ‚úÖ –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –∑–∞—Ö–∏—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤")
    except Exception:
        pass

    # –í—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –≥—Ä–æ—à–æ–≤–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
    try:
        pre_delete.disconnect(signals.prevent_delete_posted_document, sender=MoneyDocument)
        disabled_signals.append(('money_document_protection', signals.prevent_delete_posted_document, MoneyDocument))
        print("   ‚úÖ –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –∑–∞—Ö–∏—Å—Ç –≥—Ä–æ—à–æ–≤–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤")
    except Exception:
        pass

    return disabled_signals


def restore_signals(disabled_signals):
    """–í—ñ–¥–Ω–æ–≤–ª—é—î –≤—Å—ñ –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏"""
    for signal_name, signal_func, sender_model in disabled_signals:
        try:
            pre_delete.connect(signal_func, sender=sender_model)
            print(f"   ‚úÖ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ {signal_name}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è {signal_name}: {e}")


def clear_table_safe(model_class, description):
    """–ë–µ–∑–ø–µ—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ —á–µ—Ä–µ–∑ Django ORM"""
    try:
        count = model_class.objects.count()
        if count > 0:
            print(f"üóëÔ∏è {description}...")

            # –°–ø–æ—á–∞—Ç–∫—É –∑–Ω—ñ–º–∞—î–º–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —è–∫—â–æ —î –ø–æ–ª–µ is_posted
            if hasattr(model_class._meta.get_field('is_posted'), 'name'):
                posted_count = model_class.objects.filter(is_posted=True).count()
                if posted_count > 0:
                    model_class.objects.filter(is_posted=True).update(is_posted=False)
                    print(f"   üìã –ó–Ω—è—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –∑ {posted_count} –∑–∞–ø–∏—Å—ñ–≤")

            # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏
            model_class.objects.all().delete()
            print(f"   ‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {description}: {count}")
            return count
        else:
            print(f"   ‚ÑπÔ∏è {description}: –≤—ñ–¥—Å—É—Ç–Ω—ñ")
            return 0
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ {description}: {e}")
        return 0


def clear_documents_smart():
    print("üßπ –†–û–ó–£–ú–ù–ï –û–ß–ò–©–ï–ù–ù–Ø –î–û–ö–£–ú–ï–ù–¢–Ü–í")
    print("üîß –ó –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º —Å–∏–≥–Ω–∞–ª—ñ–≤ —Ç–∞ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫")
    print("üìã –î–æ–≤—ñ–¥–Ω–∏–∫–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω")
    print("=" * 50)

    # –í—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏
    print("üîß –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –∑–∞—Ö–∏—Å–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏...")
    disabled_signals = disable_all_signals()

    total_deleted = 0

    try:
        # –û—á–∏—â–µ–Ω–Ω—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É (–≤—ñ–¥ –∑–∞–ª–µ–∂–Ω–∏—Ö –¥–æ –æ—Å–Ω–æ–≤–Ω–∏—Ö)

        # 1Ô∏è‚É£ –ê–£–î–ò–¢ –õ–û–ì–ò
        try:
            deleted = clear_table_safe(AuditLog, "–ê—É–¥–∏—Ç –ª–æ–≥–∏")
            total_deleted += deleted
        except Exception as e:
            print(f"   ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è AuditLog –Ω–µ —ñ—Å–Ω—É—î: {e}")

        # 2Ô∏è‚É£ FIFO –ó–í'–Ø–ó–ö–ò (—è–∫—â–æ —î)
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª—å FIFOConnection
            for model_name in dir():
                if 'fifo' in model_name.lower() and hasattr(globals()[model_name], '_meta'):
                    model_class = globals()[model_name]
                    deleted = clear_table_safe(model_class, f"FIFO {model_name}")
                    total_deleted += deleted
        except Exception as e:
            print(f"   ‚ÑπÔ∏è FIFO –º–æ–¥–µ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ: {e}")

        # 3Ô∏è‚É£ –ë–£–•–ì–ê–õ–¢–ï–†–°–¨–ö–Ü –ü–†–û–í–û–î–ö–ò
        try:
            # –®—É–∫–∞—î–º–æ AccountingEntry –≤ —Ä—ñ–∑–Ω–∏—Ö –º—ñ—Å—Ü—è—Ö
            try:
                from backend.models import AccountingEntry
                deleted = clear_table_safe(AccountingEntry, "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å—å–∫—ñ –ø—Ä–æ–≤–æ–¥–∫–∏ (backend)")
                total_deleted += deleted
            except ImportError:
                pass

            try:
                from settlements.models import AccountingEntry as SettlementsAccountingEntry
                deleted = clear_table_safe(SettlementsAccountingEntry, "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å—å–∫—ñ –ø—Ä–æ–≤–æ–¥–∫–∏ (settlements)")
                total_deleted += deleted
            except ImportError:
                pass
        except Exception as e:
            print(f"   ‚ÑπÔ∏è –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å—å–∫—ñ –ø—Ä–æ–≤–æ–¥–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ: {e}")

        # 4Ô∏è‚É£ –ü–û–ó–ò–¶–Ü–á –¶–Ü–ù–û–£–¢–í–û–†–ï–ù–ù–Ø
        deleted = clear_table_safe(PriceSettingItem, "–ü–æ–∑–∏—Ü—ñ—ó —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è")
        total_deleted += deleted

        # 5Ô∏è‚É£ –î–û–ö–£–ú–ï–ù–¢–ò –¶–Ü–ù–û–£–¢–í–û–†–ï–ù–ù–Ø
        deleted = clear_table_safe(PriceSettingDocument, "–î–æ–∫—É–º–µ–Ω—Ç–∏ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è")
        total_deleted += deleted

        # 6Ô∏è‚É£ –ì–†–û–®–û–í–Ü –û–ü–ï–†–ê–¶–Ü–á
        try:
            deleted = clear_table_safe(MoneyOperation, "–ì—Ä–æ—à–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó")
            total_deleted += deleted
        except Exception as e:
            print(f"   ‚ÑπÔ∏è MoneyOperation –Ω–µ —ñ—Å–Ω—É—î: {e}")

        # 7Ô∏è‚É£ –ì–†–û–®–û–í–Ü –î–û–ö–£–ú–ï–ù–¢–ò
        try:
            deleted = clear_table_safe(MoneyDocument, "–ì—Ä–æ—à–æ–≤—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏")
            total_deleted += deleted
        except Exception as e:
            print(f"   ‚ÑπÔ∏è MoneyDocument –Ω–µ —ñ—Å–Ω—É—î: {e}")

        # 8Ô∏è‚É£ –°–ö–õ–ê–î–°–¨–ö–Ü –û–ü–ï–†–ê–¶–Ü–á
        deleted = clear_table_safe(Operation, "–°–∫–ª–∞–¥—Å—å–∫—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó")
        total_deleted += deleted

        # 9Ô∏è‚É£ –ü–û–ó–ò–¶–Ü–á –î–û–ö–£–ú–ï–ù–¢–Ü–í
        deleted = clear_table_safe(DocumentItem, "–ü–æ–∑–∏—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤")
        total_deleted += deleted

        # üîü –î–û–ö–£–ú–ï–ù–¢–ò (–æ—Å—Ç–∞–Ω–Ω—ñ–º–∏)
        deleted = clear_table_safe(Document, "–î–æ–∫—É–º–µ–Ω—Ç–∏")
        total_deleted += deleted

        # –°–ö–ò–î–ê–ù–ù–Ø –õ–Ü–ß–ò–õ–¨–ù–ò–ö–Ü–í
        print("üî¢ –°–∫–∏–¥–∞–Ω–Ω—è –∞–≤—Ç–æ—ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç—ñ–≤...")
        try:
            with connection.cursor() as cursor:
                # –î–ª—è PostgreSQL —Å–∫–∏–¥–∞—î–º–æ sequences
                sequences_to_reset = [
                    'backend_document_id_seq',
                    'backend_documentitem_id_seq',
                    'backend_operation_id_seq',
                    'settlements_moneydocument_id_seq',
                    'settlements_moneyoperation_id_seq',
                    'backend_pricesettingdocument_id_seq',
                    'backend_pricesettingitem_id_seq',
                    'backend_auditlog_id_seq'
                ]

                reset_count = 0
                for sequence_name in sequences_to_reset:
                    try:
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î sequence
                        cursor.execute("""
                            SELECT EXISTS (
                                SELECT 1 FROM pg_class 
                                WHERE relkind = 'S' AND relname = %s
                            )
                        """, [sequence_name])

                        if cursor.fetchone()[0]:
                            cursor.execute(f"ALTER SEQUENCE {sequence_name} RESTART WITH 1")
                            reset_count += 1

                    except Exception as e:
                        # Sequence –º–æ–∂–µ –Ω–µ —ñ—Å–Ω—É–≤–∞—Ç–∏ - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                        pass

                print(f"   ‚úÖ –°–∫–∏–Ω—É—Ç–æ sequences: {reset_count}")

        except Exception as e:
            print(f"   ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ sequences: {e}")

    finally:
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å–∏–≥–Ω–∞–ª–∏
        print("üîß –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑–∞—Ö–∏—Å–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏...")
        restore_signals(disabled_signals)

    print(f"\nüéâ –†–û–ó–£–ú–ù–ï –û–ß–ò–©–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"   üìä –í—Å—å–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: {total_deleted}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    print(f"\nüîç –ü–ï–†–ï–í–Ü–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í:")

    verification_models = [
        (Document, "üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∏"),
        (DocumentItem, "üìã –ü–æ–∑–∏—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤"),
        (Operation, "üì¶ –°–∫–ª–∞–¥—Å—å–∫—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó"),
        (PriceSettingDocument, "üí∞ –î–æ–∫—É–º–µ–Ω—Ç–∏ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è"),
        (PriceSettingItem, "üí∞ –ü–æ–∑–∏—Ü—ñ—ó —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è")
    ]

    # –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –º–æ–¥–µ–ª—ñ
    optional_models = [
        (MoneyDocument, "üíµ –ì—Ä–æ—à–æ–≤—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏"),
        (MoneyOperation, "üíµ –ì—Ä–æ—à–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó"),
        (AuditLog, "üìù –ê—É–¥–∏—Ç –ª–æ–≥–∏")
    ]

    for model_class, description in optional_models:
        try:
            verification_models.append((model_class, description))
        except:
            pass

    all_clean = True
    for model_class, description in verification_models:
        try:
            count = model_class.objects.count()
            if count == 0:
                print(f"   ‚úÖ {description}: {count}")
            else:
                print(f"   ‚ùå {description}: {count} (–∑–∞–ª–∏—à–∏–ª–∏—Å—å!)")
                all_clean = False
        except Exception as e:
            print(f"   ‚ö†Ô∏è {description}: –ø–æ–º–∏–ª–∫–∞ - {e}")

    # –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ–≤—ñ–¥–Ω–∏–∫–∏ —â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å
    print(f"\n‚úÖ –î–û–í–Ü–î–ù–ò–ö–ò –ó–ë–ï–†–ï–ñ–ï–ù–Ü:")
    reference_models = [
        (Company, "üè¢ –ö–æ–º–ø–∞–Ω—ñ—ó"),
        (Firm, "üè≠ –§—ñ—Ä–º–∏"),
        (Warehouse, "üì¶ –°–∫–ª–∞–¥–∏"),
        (Product, "üõçÔ∏è –¢–æ–≤–∞—Ä–∏"),
        (ProductGroup, "üìÇ –ì—Ä—É–ø–∏ —Ç–æ–≤–∞—Ä—ñ–≤"),
        (Customer, "üë• –ö–ª—ñ—î–Ω—Ç–∏"),
        (Supplier, "üöö –ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏"),
        (Unit, "üìè –û–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É"),
        (TradePoint, "üè™ –¢–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏"),
        (PaymentType, "üí≥ –¢–∏–ø–∏ –æ–ø–ª–∞—Ç"),
        (CustomerType, "üè∑Ô∏è –¢–∏–ø–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤"),
        (PriceType, "üí∞ –¢–∏–ø–∏ —Ü—ñ–Ω"),
        (ProductUnitConversion, "üìä –§–∞—Å—É–≤–∞–Ω–Ω—è")
    ]

    for model_class, description in reference_models:
        try:
            count = model_class.objects.count()
            print(f"   {description}: {count}")
        except Exception as e:
            print(f"   {description}: –ø–æ–º–∏–ª–∫–∞ - {e}")

    if all_clean:
        print(f"\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –î–û –†–û–ë–û–¢–ò!")
        print(f"   ‚úÖ –í—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –æ—á–∏—â–µ–Ω—ñ")
        print(f"   ‚úÖ –î–æ–≤—ñ–¥–Ω–∏–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ")
        print(f"   ‚úÖ –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ —Å–∫–∏–Ω—É—Ç—ñ")
    else:
        print(f"\n‚ö†Ô∏è –£–í–ê–ì–ê: –ù–µ –≤—Å–µ –æ—á–∏—â–µ–Ω–æ")
        print(f"   üîß –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ")

    print(f"\nüíº –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –î–õ–Ø ERP:")
    print(f"   1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏")
    print(f"   2Ô∏è‚É£ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ü—ñ–Ω–∏ –Ω–∞ —Ç–æ–≤–∞—Ä–∏")
    print(f"   3Ô∏è‚É£ –û—Ñ–æ—Ä–º–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è")
    print(f"   4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–ª–∏—à–∫–∏")
    print(f"   5Ô∏è‚É£ –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø—Ä–∞–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    print(f"   6Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–≤—ñ—Ç–∏ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É")

    return all_clean


if __name__ == "__main__":
    print("üö® –£–í–ê–ì–ê! –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —Ç–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π!")
    print("üìã –î–æ–≤—ñ–¥–Ω–∏–∫–∏ –∑–∞–ª–∏—à–∞—Ç—å—Å—è, –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±—ñ–≥ –±—É–¥–µ —Å–∫–∏–Ω—É—Ç–∏–π")

    confirm = input("\n‚ùì –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? –í–≤–µ–¥—ñ—Ç—å '–¢–ê–ö': ")

    if confirm.upper() == '–¢–ê–ö':
        success = clear_documents_smart()
        if success:
            print("\nüéä –ì–û–¢–û–í–û! –°–∏—Å—Ç–µ–º–∞ –æ—á–∏—â–µ–Ω–∞ —ñ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!")
        else:
            print("\n‚ö†Ô∏è –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.")
    else:
        print("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")