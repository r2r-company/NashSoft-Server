# backend/permissions.py (–∞–±–æ mixins.py)

from rest_framework.permissions import IsAuthenticated
from rest_framework.exceptions import PermissionDenied
from backend.models import AppUser

class InterfaceRequiredMixin:
    permission_classes = [IsAuthenticated]  # –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –≤—Ö—ñ–¥

    required_interface = None  # üëà –≤–∫–∞–∑—É—î—à —É View

    def initial(self, request, *args, **kwargs):
        super().initial(request, *args, **kwargs)

        user = request.user
        interface = getattr(self, "required_interface", None)

        if not interface:
            raise PermissionDenied("–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –≤ –∫–ª–∞—Å—ñ View")

        if not AppUser.objects.filter(
            user=user,
            is_active=True,
            interfaces__code=interface
        ).exists():
            raise PermissionDenied(f"–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É '{interface}'")
