from datetime import date, timedelta
from decimal import Decimal

import documents
from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError
from django.shortcuts import  render
from django.views.decorators.csrf import csrf_exempt
from rest_framework.decorators import api_view
from rest_framework.exceptions import NotFound
from rest_framework.generics import ListAPIView, RetrieveAPIView, ListCreateAPIView, RetrieveUpdateAPIView, \
    RetrieveUpdateDestroyAPIView
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status, permissions, filters, generics, viewsets
from django.db.models import Sum, Case, When, Value, DecimalField, F
from backend.auth import CustomLoginSerializer
from backend.models import Operation, Document, PriceSettingDocument, AppUser, Product, Company, \
    Warehouse, Customer, Supplier, ProductGroup, Unit, PaymentType, Firm, Department, CustomerType, PriceType, \
    Interface, TradePoint, ProductUnitConversion, PriceSettingItem, BudgetPeriod, ExchangeRate
from backend.operations.stock import FIFOStockManager
from backend.serializers import DocumentSerializer, DocumentListSerializer, PriceSettingDocumentSerializer, \
    ProductSerializer, CompanySerializer, WarehouseSerializer, CustomerSerializer, SupplierSerializer, \
    ProductGroupSerializer, PaymentTypeSerializer, FirmSerializer, DepartmentSerializer, AccountSerializer, \
    TechCalculationSerializer, ProductGroupFlatSerializer, CustomerTypeSerializer, PriceTypeSerializer, \
    InterfaceSerializer, UnitSerializer, AppUserSerializer, TradePointSerializer, ProductUnitConversionSerializer
from backend.services.budget import BudgetService
from backend.services.cashflow import CashFlowService
from backend.services.cost_center import CostCenterService
from backend.services.currency import CurrencyService
from backend.services.document_services import SaleService, ReceiptService, InventoryInService
from backend.services.factory import get_document_service
from backend.services.financial_reports import FinancialReportsService
from backend.services.logger import AuditLoggerService
from backend.services.price import get_price_from_setting, get_all_prices_for_product
from backend.services.tech_calc import TechCalculationService
from backend.utils.responses import StandardResponse, DocumentActionResponse
from backend.utils.unit_converter import convert_to_base
from settlements.models import Account, Contract
from settlements.serializers import ContractSerializer


class DocumentPostView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        try:
            serializer = DocumentSerializer(data=request.data)
            if serializer.is_valid():
                document = serializer.save()
                return StandardResponse.created(
                    data=DocumentSerializer(document).data,
                    message=f"–î–æ–∫—É–º–µ–Ω—Ç {document.doc_number} —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ",
                    resource_id=document.id
                )

            return StandardResponse.error(
                message="–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                details=serializer.errors,
                error_code="VALIDATION_ERROR"
            )

        # ‚úÖ –î–û–î–ê–¢–ò –î–ï–¢–ê–õ–¨–ù–ò–ô EXCEPTION HANDLER:
        except Exception as e:
            import traceback
            print("=== DJANGO CREATE DOCUMENT ERROR ===")
            print(f"Error: {e}")
            print(f"Error type: {type(e).__name__}")
            print(f"Traceback: {traceback.format_exc()}")
            print("Request data:", request.data)
            print("====================================")

            return StandardResponse.error(
                message=f"–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: {str(e)}",
                error_code="INTERNAL_ERROR"
            )


class DocumentListView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        doc_type = request.query_params.get("type")
        queryset = Document.objects.all().order_by("-date")

        if doc_type:
            queryset = queryset.filter(doc_type=doc_type)

        # ‚úÖ –í–ò–ü–†–ê–í–ò–¢–ò - –ü–û–¢–†–Ü–ë–ù–ê –ü–†–ê–í–ò–õ–¨–ù–ê –ü–ê–ì–Ü–ù–ê–¶–Ü–Ø:
        serializer = DocumentListSerializer(queryset, many=True)

        return Response({
            "success": True,
            "data": serializer.data,  # ‚úÖ –ú–ê–°–ò–í –î–û–ö–£–ú–ï–ù–¢–Ü–í
            "message": "–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ"
        }, status=200)


class DocumentDetailView(APIView):
    permission_classes = [AllowAny]  # ‚Üê –æ—Å—å —Ü—è —Å—Ç—Ä—ñ—á–∫–∞

    def get(self, request, doc_id):
        try:
            document = Document.objects.get(id=doc_id)
        except Document.DoesNotExist:
            return Response({"error": "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}, status=404)

        serializer = DocumentSerializer(document)
        data = serializer.data

        # üîΩ –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—É–º–∏ –ü–î–í
        total_vat = document.items.aggregate(
            total=Sum('vat_amount')
        )['total'] or 0

        data["total_vat"] = round(total_vat, 2)
        return Response(data, status=200)




class StockBalanceView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        try:
            firm_id = request.query_params.get("firm")
            company_id = request.query_params.get("company")
            warehouse_id = request.query_params.get("warehouse")

            if not firm_id and not company_id:
                return Response({"error": "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ firm –∞–±–æ company"}, status=400)

            from backend.operations.stock import FIFOStockManager

            # ‚úÖ –õ–û–ì–Ü–ö–ê –ü–û –§–Ü–†–ú–ê–ú
            if firm_id:
                # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ñ—ñ—Ä–º–∏
                firms = [Firm.objects.get(id=firm_id)]
            else:
                # –î–ª—è –≤—Å—ñ—Ö —Ñ—ñ—Ä–º –∫–æ–º–ø–∞–Ω—ñ—ó
                firms = Firm.objects.filter(company_id=company_id)

            # –°–∫–ª–∞–¥–∏
            warehouses = Warehouse.objects.all()
            if warehouse_id:
                warehouses = warehouses.filter(id=warehouse_id)

            data = []
            for firm in firms:
                for warehouse in warehouses:
                    # –¢–æ–≤–∞—Ä–∏ —â–æ —î –Ω–∞ —Ü—å–æ–º—É —Å–∫–ª–∞–¥—ñ –¥–ª—è —Ü—ñ—î—ó —Ñ—ñ—Ä–º–∏
                    products = Product.objects.filter(
                        operation__warehouse=warehouse,
                        operation__document__firm=firm,
                        operation__direction='in',
                        operation__visible=True
                    ).distinct()

                    for product in products:
                        stock = FIFOStockManager.get_available_stock(product, warehouse, firm)
                        if stock > 0:
                            data.append({
                                'product__id': product.id,
                                'product__name': product.name,
                                'warehouse__id': warehouse.id,
                                'warehouse__name': warehouse.name,
                                'firm__id': firm.id,  # ‚úÖ –î–û–î–ê–ù–û
                                'firm__name': firm.name,  # ‚úÖ –î–û–î–ê–ù–û
                                'total': float(stock)
                            })

            return Response(data)
        except Exception as e:
            return Response({"error": str(e)}, status=500)


class ProductOperationsDebugView(APIView):
    def get(self, request, product_id):
        try:
            ops = Operation.objects.filter(product_id=product_id).values(
                'id',
                'product__name',
                'warehouse__id',
                'warehouse__name',
                'quantity',
                'price',
                'direction',
                'visible',
                'created_at',
                'document__doc_number'
            ).order_by('created_at')
            return Response(list(ops))
        except Exception as e:
            return Response({"error": str(e)}, status=500)


class StockByWarehouseView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        try:
            warehouse_id = request.query_params.get("warehouse")

            operations = Operation.objects.filter(visible=True)
            if warehouse_id:
                operations = operations.filter(warehouse_id=warehouse_id)

            operations = operations.values('warehouse__id', 'warehouse__name', 'product__id', 'product__name') \
                .annotate(
                incoming=Sum(Case(
                    When(direction='in', then=F('quantity')),
                    default=Value(0),
                    output_field=DecimalField()
                )),
                outgoing=Sum(Case(
                    When(direction='out', then=F('quantity')),
                    default=Value(0),
                    output_field=DecimalField()
                ))
            ).order_by('warehouse__id', 'product__name')

            result = {}
            for item in operations:
                wid = item['warehouse__id']
                balance = (item['incoming'] or 0) - (item['outgoing'] or 0)

                if wid not in result:
                    result[wid] = {
                        'warehouse_name': item['warehouse__name'],
                        'products': []
                    }

                result[wid]['products'].append({
                    'product_id': item['product__id'],
                    'product_name': item['product__name'],
                    'quantity': balance
                })

            return Response(result)
        except Exception as e:
            return Response({"error": str(e)}, status=500)


class DocumentActionGetView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        doc_id = request.query_params.get("id")
        action = request.query_params.get("action")

        if not doc_id:
            return Response({"error": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä 'id'"}, status=400)

        try:
            document = Document.objects.get(id=int(doc_id))
        except Document.DoesNotExist:
            return Response({"error": "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}, status=404)
        except ValueError:
            return Response({"error": "–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç UUID"}, status=400)

        service = get_document_service(document)

        try:
            if action == "progress":
                service.post()
                return Response({"message": f"–î–æ–∫—É–º–µ–Ω—Ç {document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ"}, status=200)

            if action == "unpost":
                service.unpost()
                return Response({"message": f"–î–æ–∫—É–º–µ–Ω—Ç {document.doc_number} —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ"}, status=200)

            return Response({"error": "–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è"}, status=400)

        except ValidationError as e:
            return Response({"error": e.messages}, status=400)


class TransferActionView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        doc_id = request.query_params.get("id")
        action = request.query_params.get("action")

        if not doc_id:
            return StandardResponse.error("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä 'id'", "MISSING_PARAMETER")

        try:
            document = Document.objects.get(id=int(doc_id))
        except Document.DoesNotExist:
            return StandardResponse.not_found("–î–æ–∫—É–º–µ–Ω—Ç", "document")
        except ValueError:
            return StandardResponse.error("–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID", "INVALID_ID")

        if document.doc_type != 'transfer':
            return StandardResponse.error("–¶–µ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è", "INVALID_DOCUMENT_TYPE")

        service = get_document_service(document)

        # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ middleware
        logger = AuditLoggerService.create_from_request(request, document=document)

        try:
            if action == "progress":
                logger.log_event("transfer_action_requested", f"–ó–∞–ø–∏—Ç –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è {document.doc_number}")
                service.post()
                return DocumentActionResponse.posted(document.doc_number, "–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è")

            if action == "unpost":
                logger.log_event("transfer_unpost_requested",
                                 f"–ó–∞–ø–∏—Ç –Ω–∞ —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è {document.doc_number}")
                service.unpost()
                return DocumentActionResponse.unposted(document.doc_number, "–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è")

            return StandardResponse.error("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è", "UNKNOWN_ACTION")

        except Exception as e:
            logger.log_error("transfer_action_failed", e, {"action": action, "doc_id": doc_id})
            return StandardResponse.error(str(e), "SERVICE_ERROR")


class ReturnToSupplierActionView(APIView):
    def get(self, request):
        doc_id = request.query_params.get("id")
        action = request.query_params.get("action")

        if not doc_id:
            return Response({"error": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä 'id'"}, status=400)

        try:
            document = Document.objects.get(id=int(doc_id))
        except Document.DoesNotExist:
            return Response({"error": "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}, status=404)
        except ValueError:
            return Response({"error": "–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID"}, status=400)

        if document.doc_type != 'return_to_supplier':
            return Response({"error": "–¶–µ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É"}, status=400)

        service = get_document_service(document)

        try:
            if action == "progress":
                service.post()
                return Response({"message": f"–î–æ–∫—É–º–µ–Ω—Ç {document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ"}, status=200)

            if action == "unpost":
                service.unpost()
                return Response({"message": f"–î–æ–∫—É–º–µ–Ω—Ç {document.doc_number} —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ"}, status=200)

            return Response({"error": "–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è"}, status=400)

        except ValidationError as e:
            return Response({"error": e.messages}, status=400)


class ReturnFromClientActionView(APIView):
    def get(self, request):
        doc_id = request.query_params.get("id")
        action = request.query_params.get("action")

        if not doc_id:
            return Response({"error": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä 'id'"}, status=400)

        try:
            document = Document.objects.get(id=int(doc_id))
        except Document.DoesNotExist:
            return Response({"error": "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}, status=404)
        except ValueError:
            return Response({"error": "–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID"}, status=400)

        if document.doc_type != 'return_from_client':
            return Response({"error": "–¶–µ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞"}, status=400)

        service = get_document_service(document)

        try:
            if action == "progress":
                service.post()
                return Response({"message": f"–î–æ–∫—É–º–µ–Ω—Ç {document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ"}, status=200)

            if action == "unpost":
                service.unpost()
                return Response({"message": f"–î–æ–∫—É–º–µ–Ω—Ç {document.doc_number} —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ"}, status=200)

            return Response({"error": "–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è"}, status=400)

        except ValidationError as e:
            return Response({"error": e.messages}, status=400)


class SaleActionView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        doc_id = request.query_params.get("id")
        action = request.query_params.get("action")

        if not doc_id:
            return StandardResponse.error("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä 'id'", "MISSING_PARAMETER")

        try:
            document = Document.objects.get(id=int(doc_id))
        except Document.DoesNotExist:
            return StandardResponse.not_found("–î–æ–∫—É–º–µ–Ω—Ç", "document")
        except ValueError:
            return StandardResponse.error("–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID", "INVALID_ID")

        if document.doc_type != 'sale':
            return StandardResponse.error("–¶–µ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–¥–∞–∂—É", "INVALID_DOCUMENT_TYPE")

        # ‚¨áÔ∏è –î–û–î–ê–ô–¢–ï request –¢–£–¢
        service = SaleService(document, request=request)

        try:
            if action == "progress":
                service.post()
                return DocumentActionResponse.posted(document.doc_number, "–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è")

            if action == "unpost":
                service.unpost()
                return DocumentActionResponse.unposted(document.doc_number, "–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è")

            return StandardResponse.error("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è", "UNKNOWN_ACTION")

        except Exception as e:
            return StandardResponse.error(str(e), "SERVICE_ERROR")


class ReceiptActionView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        doc_id = request.query_params.get("id")
        action = request.query_params.get("action")

        if not doc_id:
            return StandardResponse.error("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä 'id'", "MISSING_PARAMETER")

        try:
            document = Document.objects.get(id=int(doc_id))
        except Document.DoesNotExist:
            return StandardResponse.not_found("–î–æ–∫—É–º–µ–Ω—Ç", "document")

        if document.doc_type != 'receipt':
            return StandardResponse.error("–¶–µ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è", "INVALID_DOCUMENT_TYPE")

        service = ReceiptService(document, request=request)

        try:
            if action == "progress":
                service.post()
                return DocumentActionResponse.posted(document.doc_number, "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è")

            if action == "unpost":
                service.unpost()
                return DocumentActionResponse.unposted(document.doc_number, "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è")

            return StandardResponse.error("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è", "UNKNOWN_ACTION")

        except Exception as e:
            return StandardResponse.error(str(e), "SERVICE_ERROR")

class InventoryActionView(APIView):
    def get(self, request):
        doc_id = request.query_params.get("id")
        action = request.query_params.get("action")

        if not doc_id:
            return Response({"error": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä 'id'"}, status=400)

        try:
            document = Document.objects.get(id=int(doc_id))
        except Document.DoesNotExist:
            return Response({"error": "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}, status=404)

        if document.doc_type != 'inventory':
            return Response({"error": "–¶–µ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—ó"}, status=400)

        service = get_document_service(document)

        try:
            if action == "progress":
                service.post()
                return Response({"message": f"–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—é {document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ"}, status=200)

            if action == "unpost":
                service.unpost()
                return Response({"message": f"–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—é {document.doc_number} —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ"}, status=200)

            return Response({"error": "–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è"}, status=400)

        except ValidationError as e:
            return Response({"error": e.messages}, status=400)




class StockInActionView(APIView):
    permission_classes = [AllowAny]
    def get(self, request):
        doc_id = request.query_params.get("id")
        action = request.query_params.get("action")

        if not doc_id:
            return Response({"error": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä 'id'"}, status=400)

        try:
            document = Document.objects.get(id=int(doc_id))
        except Document.DoesNotExist:
            return Response({"error": "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}, status=404)

        if document.doc_type != 'stock_in':
            return Response({"error": "–¶–µ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç –æ–ø—Ä–∏–±—É—Ç–∫—É–≤–∞–Ω–Ω—è"}, status=400)

        service = get_document_service(document)

        try:
            if action == "progress":
                service.post()
                return Response({"message": f"–î–æ–∫—É–º–µ–Ω—Ç {document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ"}, status=200)
            if action == "unpost":
                service.unpost()
                return Response({"message": f"–î–æ–∫—É–º–µ–Ω—Ç {document.doc_number} —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ"}, status=200)
            return Response({"error": "–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è"}, status=400)
        except ValidationError as e:
            return Response({"error": e.messages}, status=400)




class PriceSettingDocumentActionView(APIView):
    permission_classes = [AllowAny]
    def get(self, request):
        action = request.query_params.get('action')
        doc_id = request.query_params.get('id')

        if not action or not doc_id:
            raise ValidationError("–ù–µ –≤–∫–∞–∑–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ action –∞–±–æ id.")

        try:
            document = PriceSettingDocument.objects.get(id=doc_id)
        except PriceSettingDocument.DoesNotExist:
            return Response({"error": "–î–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."}, status=status.HTTP_404_NOT_FOUND)

        if action == 'approve':
            return self._approve_document(document)
        elif action == 'unapprove':
            return self._unapprove_document(document)
        else:
            raise ValidationError("–ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä action.")

    def _approve_document(self, document):
        if document.status == 'approved':
            # –Ø–∫—â–æ –¥–æ–∫—É–º–µ–Ω—Ç –≤–∂–µ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 400
            return Response({"error": f"–î–æ–∫—É–º–µ–Ω—Ç {document.doc_number} –≤–∂–µ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ."},
                            status=status.HTTP_400_BAD_REQUEST)

        # –ó–∞—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
        document.status = 'approved'
        document.save()

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        logger = AuditLoggerService(document=document)
        logger.log_event("price_setting_approved", f"–¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è {document.doc_number} –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")

        return Response({"message": f"–¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è {document.doc_number} –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ."})

    def _unapprove_document(self, document):
        if document.status != 'approved':
            # –Ø–∫—â–æ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 400
            return Response(
                {"error": f"–î–æ–∫—É–º–µ–Ω—Ç {document.doc_number} –Ω–µ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ, —Ç–æ–º—É –π–æ–≥–æ –Ω–µ –º–æ–∂–Ω–∞ —Ä–æ–∑–ø—Ä–æ–≤–µ—Å—Ç–∏."},
                status=status.HTTP_400_BAD_REQUEST)

        # –†–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document.status = 'draft'
        document.save()

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        logger = AuditLoggerService(document=document)
        logger.log_event("price_setting_unapproved", f"–¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è {document.doc_number} —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ.")

        return Response({"message": f"–¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è {document.doc_number} —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ."})

    def _reject_document(self, document):
        if document.status == 'draft':
            raise ValidationError("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ, —Ç–æ–º—É –π–æ–≥–æ –Ω–µ –º–æ–∂–Ω–∞ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏.")

        # –í—ñ–¥—Ö–∏–ª—è—î–º–æ –ø—Ä–∞–π—Å
        document.status = 'draft'
        document.save()

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        logger = AuditLoggerService(document=document)
        logger.log_event("price_setting_rejected", f"–¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è {document.doc_number} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")

        return Response({"message": f"–¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è {document.doc_number} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ."})


class CreatePriceSettingDocumentView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        serializer = PriceSettingDocumentSerializer(data=request.data)
        if serializer.is_valid():
            price_setting_document = serializer.save()  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
            return Response({
                "message": f"–î–æ–∫—É–º–µ–Ω—Ç —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è {price_setting_document.doc_number} —Å—Ç–≤–æ—Ä–µ–Ω–æ.",
                "id": price_setting_document.id
            }, status=201)

        return Response(serializer.errors, status=400)


class PriceSettingDocumentListView(APIView):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è.
    """
    permission_classes = [AllowAny]  # –∞–±–æ IsAuthenticated

    def get(self, request):
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è
            price_setting_documents = PriceSettingDocument.objects.all().order_by('-created_at')

            # –°–µ—Ä—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ
            serializer = PriceSettingDocumentSerializer(price_setting_documents, many=True)

            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–µ—Ä—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            return Response(serializer.data, status=status.HTTP_200_OK)

        except Exception as e:
            # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏
            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


from django.shortcuts import render
from django.db.models import Sum, Case, When, Value, DecimalField, F
from backend.models import Operation, Document

@csrf_exempt
def stock_report(request):

    # === –ó–∞–ª–∏—à–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞—Ö ===
    operations = (
        Operation.objects
        .filter(visible=True)
        .values('product__id', 'product__name', 'warehouse__id', 'warehouse__name')
        .annotate(
            incoming=Sum(Case(
                When(direction='in', then=F('quantity')),
                default=Value(0),
                output_field=DecimalField()
            )),
            outgoing=Sum(Case(
                When(direction='out', then=F('quantity')),
                default=Value(0),
                output_field=DecimalField()
            ))
        )
        .order_by('warehouse__id', 'product__name')
    )

    result = {}
    for item in operations:
        wid = item['warehouse__id']
        balance = (item['incoming'] or 0) - (item['outgoing'] or 0)

        if wid not in result:
            result[wid] = {
                'warehouse_name': item['warehouse__name'],
                'products': []
            }

        result[wid]['products'].append({
            'product_id': item['product__id'],
            'product_name': item['product__name'],
            'quantity': balance
        })

    # === –î–æ–∫—É–º–µ–Ω—Ç–∏ –æ–±–ª—ñ–∫—É ===
    document_types = [
        'receipt', 'sale', 'return_to_supplier',
        'return_from_client', 'transfer', 'inventory', 'stock_in'
    ]

    all_docs = {}
    for doc_type in document_types:
        docs = (
            Document.objects
            .filter(doc_type=doc_type)
            .prefetch_related("items", "items__product", "company", "warehouse")
            .order_by('-date')
        )

        for doc in docs:
            doc.total_amount = sum(item.quantity * item.price for item in doc.items.all())
            doc.total_vat = sum(item.vat_amount or 0 for item in doc.items.all())
            doc.total_without_vat = sum(item.price_without_vat or 0 for item in doc.items.all())
            doc.total_with_vat = doc.total_without_vat + doc.total_vat

            if doc.doc_type == 'sale':
                enriched_items = []
                for item in doc.items.all():
                    sale_op = Operation.objects.filter(
                        document=doc,
                        product=item.product,
                        direction='out',
                        visible=True
                    ).first()

                    source_price = sale_op.source_operation.price if sale_op and sale_op.source_operation else None

                    enriched_items.append({
                        'product_name': item.product.name,
                        'quantity': item.quantity,
                        'price': item.price,
                        'source_price': source_price,
                    })
                doc.enriched_items = enriched_items

        label_map = {
            'receipt': '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è',
            'sale': '–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó',
            'return_to_supplier': '–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É',
            'return_from_client': '–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞',
            'transfer': '–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è',
            'inventory': '–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—ó',
            'stock_in': '–û–ø—Ä–∏–±—É—Ç–∫—É–≤–∞–Ω–Ω—è',
        }

        all_docs[label_map[doc_type]] = docs

    # === –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—Å—ñ –∑–≤—ñ—Ç–∏ (–¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –≤–∫–ª–∞–¥–∫–∞—Ö –∞–±–æ –≤ UI) ===
    sections = {
        "–î–æ–∫—É–º–µ–Ω—Ç–∏ –æ–±–ª—ñ–∫—É": [
            ("–ü–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è", "api/documents/?type=receipt"),
            ("–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è", "api/documents/?type=sale"),
            ("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É", "api/documents/?type=return_to_supplier"),
            ("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞", "api/documents/?type=return_from_client"),
            ("–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è", "api/documents/?type=transfer"),
            ("–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—è", "api/documents/?type=inventory"),
            ("–û–ø—Ä–∏–±—É—Ç–∫—É–≤–∞–Ω–Ω—è", "api/documents/?type=stock_in"),
        ],
        "–§—ñ–Ω–∞–Ω—Å–∏": [
            ("–ì—Ä–æ—à–æ–≤—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏", "api/money-documents/"),
            ("–ì—Ä–æ—à–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó", "api/money-operations/"),
            ("–ü—Ä–æ–≤–æ–¥–∫–∏", "api/money-ledger/"),
            ("–ë–∞–ª–∞–Ω—Å –∫–∞—Å/–±–∞–Ω–∫—É", "api/money/balance/"),
            ("–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å—å–∫–∏–π –±–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—ñ–≤", "api/account-ledger-balance/"),
        ],
        "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞": [
            ("–ó–∞–ª–∏—à–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞—Ö", "api/stock/warehouses/"),
            ("–ë–æ—Ä–≥–∏ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞–º", "api/supplier-debts/"),
            ("–ë–∞–ª–∞–Ω—Å –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤", "api/supplier-balance/"),
            ("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞", "api/supplier-payments/?supplier=1"),
            ("FIFO –ø–æ —Ç–æ–≤–∞—Ä—É", "api/debug/operations/1/"),
            ("–ó–≤—ñ—Ç –ø–æ –ü–î–í (—Ä–∞—Ö. 644)", "api/vat-report/"),
        ],
        "–¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è": [
            ("–¶—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è", "api/price-setting-documents/"),
        ],
        "–î–æ–≤—ñ–¥–Ω–∏–∫–∏": [
            ("–¢–æ–≤–∞—Ä–∏", "api/products/"),
            ("–ì—Ä—É–ø–∏ —Ç–æ–≤–∞—Ä—ñ–≤", "api/product-groups/"),
            ("–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏", "api/suppliers/"),
            ("–ö–ª—ñ—î–Ω—Ç–∏", "api/customers/"),
            ("–°–∫–ª–∞–¥–∏", "api/warehouses/"),
            ("–ö–æ–º–ø–∞–Ω—ñ—ó", "api/companies/"),
            ("–§—ñ—Ä–º–∏", "api/firms/"),
            ("–í—ñ–¥–¥—ñ–ª–∏", "api/departments/"),
        ],
        "–ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å": [
            ("–†–µ—î—Å—Ç—Ä –ø–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∑–æ–±–æ–≤ º—è–∑–∞–Ω—å", "api/vat-obligation-report/"),
        ]
    }

    return render(request, "backend/stock_report.html", {
        "sections": sections
    })


class WhoAmIView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        user = request.user

        app_users = (
            AppUser.objects
            .filter(user=user, is_active=True, interfaces__isnull=False)
            .prefetch_related("interfaces__access_group__permissions", "company")
        )

        interfaces_data = []
        all_permissions = set()
        has_access = False

        for app_user in app_users:
            for interface in app_user.interfaces.all():
                has_access = True

                # ‚¨áÔ∏è –ó–±–∏—Ä–∞—î–º–æ –ø—Ä–∞–≤–∞ –∑ group, —è–∫—â–æ –≤–æ–Ω–∞ —î
                if interface.access_group:
                    perms = interface.access_group.permissions.values_list("codename", flat=True)
                    all_permissions.update(perms)

                interfaces_data.append({
                    "username": user.username,
                    "interface": interface.code,
                    "interface_name": interface.name,
                    "company_id": app_user.company.id if app_user.company else None,
                    "company_name": app_user.company.name if app_user.company else None,
                    "app_user_id": app_user.id
                })

        return Response({
            "access": has_access,
            "permissions": sorted(list(all_permissions)),  # ‚¨ÖÔ∏è –≤—Å—ñ –ø—Ä–∞–≤–∞, –±–µ–∑ –¥—É–±–ª—ñ–≤
            "interfaces": interfaces_data
        })


class CustomLoginView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        serializer = CustomLoginSerializer(data=request.data)
        if serializer.is_valid():
            return Response(serializer.validated_data, status=200)
        return Response(serializer.errors, status=400)


class ProductListView(ListAPIView):
    serializer_class = ProductSerializer
    permission_classes = [AllowAny]
    filter_backends = [filters.SearchFilter]
    search_fields = ['name']

    def get_queryset(self):
        queryset = Product.objects.all()
        warehouse_id = self.request.query_params.get('warehouse')
        company_id = self.request.query_params.get('company')

        if warehouse_id:
            queryset = queryset.filter(operation__warehouse_id=warehouse_id).distinct()
        if company_id:
            queryset = queryset.filter(operation__warehouse__company_id=company_id).distinct()

        return queryset


class ProductTotalStockView(APIView):
    permission_classes = [AllowAny]

    def get(self, request, product_id):
        try:
            operations = (
                Operation.objects
                .filter(product_id=product_id, visible=True)
                .values('warehouse__id', 'warehouse__name')
                .annotate(
                    incoming=Sum(Case(
                        When(direction='in', then=F('quantity')),
                        default=Value(0),
                        output_field=DecimalField()
                    )),
                    outgoing=Sum(Case(
                        When(direction='out', then=F('quantity')),
                        default=Value(0),
                        output_field=DecimalField()
                    ))
                )
            )

            total = 0
            details = []

            for op in operations:
                qty = (op['incoming'] or 0) - (op['outgoing'] or 0)
                if qty > 0:
                    details.append({
                        'warehouse_id': op['warehouse__id'],
                        'warehouse_name': op['warehouse__name'],
                        'quantity': qty
                    })
                    total += qty

            return Response({
                'product_id': product_id,
                'total_quantity': total,
                'warehouses': details
            })

        except Exception as e:
            return Response({"error": str(e)}, status=500)




class ProductListCreateView(ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    permission_classes = [AllowAny]

class ProductDetailView(RetrieveUpdateDestroyAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    permission_classes = [AllowAny]


class CompanyListView(ListCreateAPIView):
    queryset = Company.objects.all()
    serializer_class = CompanySerializer
    permission_classes = [AllowAny]


class WarehouseListView(ListAPIView):
    serializer_class = WarehouseSerializer
    permission_classes = [AllowAny]

    def get_queryset(self):
        queryset = Warehouse.objects.all()
        company_id = self.request.query_params.get('company')
        if company_id:
            queryset = queryset.filter(company_id=company_id)
        return queryset




class WarehouseListCreateView(ListCreateAPIView):
    queryset = Warehouse.objects.all()
    serializer_class = WarehouseSerializer
    permission_classes = [AllowAny]


class WarehouseDetailView(RetrieveUpdateDestroyAPIView):
    queryset = Warehouse.objects.all()
    serializer_class = WarehouseSerializer
    permission_classes = [AllowAny]





class CustomerListCreateView(generics.ListCreateAPIView):
    queryset = Customer.objects.all()
    serializer_class = CustomerSerializer
    permission_classes = [AllowAny]

class CustomerDetailView(RetrieveUpdateDestroyAPIView):
    queryset = Customer.objects.all()
    serializer_class = CustomerSerializer
    permission_classes = [AllowAny]


class SupplierListCreateView(generics.ListCreateAPIView):
    queryset = Supplier.objects.all()
    serializer_class = SupplierSerializer
    permission_classes = [AllowAny]



class ProductGroupTreeView(APIView):
    permission_classes = [AllowAny]
    def get(self, request):
        # –û—Ç—Ä–∏–º—É—î–º–æ –ª–∏—à–µ –∫–æ—Ä–µ–Ω–µ–≤—ñ –≥—Ä—É–ø–∏
        roots = ProductGroup.objects.filter(parent=None).prefetch_related("children")
        serializer = ProductGroupSerializer(roots, many=True)
        return Response(serializer.data)

class ProductGroupListCreateView(ListCreateAPIView):
    queryset = ProductGroup.objects.all()
    serializer_class = ProductGroupSerializer
    permission_classes = [AllowAny]

class ProductGroupDetailView(RetrieveUpdateDestroyAPIView):
    queryset = ProductGroup.objects.all()
    serializer_class = ProductGroupSerializer
    permission_classes = [AllowAny]



class UserListView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        User = get_user_model()
        users = User.objects.all().values("id", "username", "email", "first_name", "last_name")
        return Response(list(users))

class UnitListView(APIView):
    permission_classes = [AllowAny]  # ‚Üê –æ—Å—å —Ü–µ —Ç—Ä–µ–±–∞

    def get(self, request):
        units = Unit.objects.all().values("id", "name", "symbol")
        return Response(list(units))

class UnitListCreateView(ListCreateAPIView):
    queryset = Unit.objects.all()
    serializer_class = UnitSerializer
    permission_classes = [AllowAny]

class UnitDetailView(RetrieveUpdateDestroyAPIView):
    queryset = Unit.objects.all()
    serializer_class = UnitSerializer
    permission_classes = [AllowAny]


class PaymentTypeListCreateView(ListCreateAPIView):
    queryset = PaymentType.objects.all()
    serializer_class = PaymentTypeSerializer
    permission_classes = [AllowAny]

class SupplierDetailView(RetrieveUpdateDestroyAPIView):
    queryset = Supplier.objects.all()
    serializer_class = SupplierSerializer
    permission_classes = [AllowAny]

class FirmListView(ListCreateAPIView):
    queryset = Firm.objects.all()
    serializer_class = FirmSerializer
    permission_classes = [AllowAny]

class DepartmentListView(ListCreateAPIView):
    queryset = Department.objects.all()
    serializer_class = DepartmentSerializer
    permission_classes = [AllowAny]


class DepartmentDetailView(RetrieveUpdateDestroyAPIView):
    queryset = Department.objects.all()
    serializer_class = DepartmentSerializer
    permission_classes = [AllowAny]


class AccountListView(ListAPIView):
    serializer_class = AccountSerializer
    permission_classes = [AllowAny]

    def get_queryset(self):
        queryset = Account.objects.select_related('company').all()
        company_id = self.request.query_params.get('company')

        if company_id:
            queryset = queryset.filter(company_id=company_id)

        return queryset


class AccountListCreateView(ListCreateAPIView):
    serializer_class = AccountSerializer
    permission_classes = [AllowAny]

    def get_queryset(self):
        queryset = Account.objects.select_related('company').all()
        company_id = self.request.query_params.get('company')

        if company_id:
            queryset = queryset.filter(company_id=company_id)

        return queryset


class AccountDetailView(RetrieveUpdateDestroyAPIView):
    queryset = Account.objects.select_related('company').all()
    serializer_class = AccountSerializer
    permission_classes = [AllowAny]


class TechCalculationAPIView(APIView):
    def post(self, request):
        serializer = TechCalculationSerializer(data=request.data)
        if not serializer.is_valid():
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        validated = serializer.validated_data
        try:
            service = TechCalculationService(
                validated['product_id'], validated['mode'], validated['weight']
            )
            result = service.calculate()

            return Response(result)
        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)


class ProductGroupFlatView(ListAPIView):
    queryset = ProductGroup.objects.select_related("parent").all().order_by("name")
    serializer_class = ProductGroupFlatSerializer
    permission_classes = [AllowAny]


class CustomerTypeListView(ListAPIView):
    queryset = CustomerType.objects.all()
    serializer_class = CustomerTypeSerializer
    permission_classes = [AllowAny]


class CustomerTypeListCreateView(ListCreateAPIView):
    queryset = CustomerType.objects.all()
    serializer_class = CustomerTypeSerializer
    permission_classes = [AllowAny]

class CustomerTypeDetailView(RetrieveUpdateDestroyAPIView):
    queryset = CustomerType.objects.all()
    serializer_class = CustomerTypeSerializer
    permission_classes = [AllowAny]


class PriceTypeListView(ListAPIView):
    queryset = PriceType.objects.all()
    serializer_class = PriceTypeSerializer
    permission_classes = [AllowAny]

class PriceTypeListCreateView(ListCreateAPIView):
    queryset = PriceType.objects.all()
    serializer_class = PriceTypeSerializer
    permission_classes = [AllowAny]

class PriceTypeDetailView(RetrieveUpdateDestroyAPIView):
    queryset = PriceType.objects.all()
    serializer_class = PriceTypeSerializer
    permission_classes = [AllowAny]


class AppUserListView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        data = []
        for app_user in AppUser.objects.select_related("user", "company").prefetch_related("interfaces"):
            data.append({
                "id": app_user.id,
                "username": app_user.user.username,
                "email": app_user.user.email,
                "first_name": app_user.user.first_name,
                "last_name": app_user.user.last_name,
                "company": app_user.company.name if app_user.company else None,
                "roles": [i.name for i in app_user.interfaces.all()],
                "is_active": app_user.is_active,
            })
        return Response(data)


class AppUserListCreateView(ListCreateAPIView):
    queryset = AppUser.objects.select_related("user", "company").prefetch_related("interfaces")
    serializer_class = AppUserSerializer
    permission_classes = [AllowAny]


class AppUserDetailView(RetrieveUpdateDestroyAPIView):
    queryset = AppUser.objects.select_related("user", "company").prefetch_related("interfaces")
    serializer_class = AppUserSerializer
    permission_classes = [AllowAny]




class InterfaceListCreateView(ListCreateAPIView):
    queryset = Interface.objects.select_related('access_group').all()
    serializer_class = InterfaceSerializer
    permission_classes = [AllowAny]

class InterfaceDetailView(RetrieveUpdateDestroyAPIView):
    queryset = Interface.objects.select_related('access_group').all()
    serializer_class = InterfaceSerializer
    permission_classes = [AllowAny]

from rest_framework.generics import RetrieveAPIView

class CompanyDetailView(RetrieveUpdateDestroyAPIView):
    queryset = Company.objects.all()
    serializer_class = CompanySerializer
    permission_classes = [AllowAny]




class FirmViewSet(viewsets.ViewSet):
    permission_classes = [AllowAny]

    def retrieve(self, request, pk=None):
        try:
            firm = Firm.objects.get(pk=pk)
        except Firm.DoesNotExist:
            raise NotFound("–§—ñ—Ä–º—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        serializer = FirmSerializer(firm)
        return Response(serializer.data)

    def update(self, request, pk=None):
        try:
            firm = Firm.objects.get(pk=pk)
        except Firm.DoesNotExist:
            raise NotFound("–§—ñ—Ä–º—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        serializer = FirmSerializer(firm, data=request.data, partial=True)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return Response(serializer.data)

    def destroy(self, request, pk=None):
        try:
            firm = Firm.objects.get(pk=pk)
        except Firm.DoesNotExist:
            raise NotFound("–§—ñ—Ä–º—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        firm.delete()
        return Response({"detail": "–§—ñ—Ä–º—É –≤–∏–¥–∞–ª–µ–Ω–æ"}, status=status.HTTP_204_NO_CONTENT)



class FirmListCreateView(ListCreateAPIView):
    queryset = Firm.objects.all()
    serializer_class = FirmSerializer
    permission_classes = [AllowAny]




class FirmDetailView(RetrieveUpdateDestroyAPIView):
    queryset = Firm.objects.all()
    serializer_class = FirmSerializer
    permission_classes = [AllowAny]


class VatTypeChoicesView(APIView):
    permission_classes = [permissions.AllowAny]
    def get(self, request):
        choices = ["–§–û–ü", "–¢–û–í", "–¢–ó–û–í"]

        return Response(choices)

class TradePointListCreateView(ListCreateAPIView):
    queryset = TradePoint.objects.all()
    serializer_class = TradePointSerializer
    permission_classes = [AllowAny]

class TradePointDetailView(RetrieveUpdateDestroyAPIView):
    queryset = TradePoint.objects.all()
    serializer_class = TradePointSerializer
    permission_classes = [AllowAny]




class ReceiptProductsView(APIView):
    permission_classes = [AllowAny]
    def get(self, request):
        doc_id = request.query_params.get("document_id")

        if not doc_id:
            return Response({"error": "–ù–µ –≤–∫–∞–∑–∞–Ω–æ document_id"}, status=400)

        try:
            document = Document.objects.get(id=doc_id, doc_type='receipt')
        except Document.DoesNotExist:
            return Response({"error": "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Ü–µ –Ω–µ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è"}, status=404)

        items = document.items.select_related("product", "unit").all()
        result = []

        for item in items:
            result.append({
                "product": item.product.id,
                "unit": item.unit.id if item.unit else None,
                "quantity": float(item.quantity),
                "price": float(item.price),
                "vat_percent": float(item.vat_percent or 0),
                "converted_quantity": float(item.converted_quantity or item.quantity),
                "source_item_id": item.id
            })

        return Response(result)


class ProductUnitConversionListCreateView(ListCreateAPIView):
    queryset = ProductUnitConversion.objects.all()
    serializer_class = ProductUnitConversionSerializer
    permission_classes = [AllowAny]

class ProductUnitConversionDetailView(RetrieveUpdateDestroyAPIView):
    queryset = ProductUnitConversion.objects.all()
    serializer_class = ProductUnitConversionSerializer
    permission_classes = [AllowAny]

class ProductConversionsByProductIdView(APIView):
    permission_classes = [AllowAny]

    def get(self, request, product_id):
        conversions = ProductUnitConversion.objects.filter(product_id=product_id)
        serializer = ProductUnitConversionSerializer(conversions, many=True)
        return Response(serializer.data)


class ConversionActionView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        doc_id = request.query_params.get("id")
        action = request.query_params.get("action")

        if not doc_id:
            return StandardResponse.error("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä 'id'", "MISSING_PARAMETER")

        try:
            document = Document.objects.get(id=int(doc_id))
        except Document.DoesNotExist:
            return StandardResponse.not_found("–î–æ–∫—É–º–µ–Ω—Ç", "document")

        if document.doc_type != 'conversion':
            return StandardResponse.error("–¶–µ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç —Ñ–∞—Å—É–≤–∞–Ω–Ω—è", "INVALID_DOCUMENT_TYPE")

        service = get_document_service(document)
        logger = AuditLoggerService.create_from_request(request, document=document)

        try:
            if action == "progress":
                logger.log_event("conversion_action_requested", f"–ó–∞–ø–∏—Ç –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —Ñ–∞—Å—É–≤–∞–Ω–Ω—è {document.doc_number}")
                service.post()
                return DocumentActionResponse.posted(document.doc_number, "–§–∞—Å—É–≤–∞–Ω–Ω—è")

            if action == "unpost":
                logger.log_event("conversion_unpost_requested", f"–ó–∞–ø–∏—Ç –Ω–∞ —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —Ñ–∞—Å—É–≤–∞–Ω–Ω—è {document.doc_number}")
                service.unpost()
                return DocumentActionResponse.unposted(document.doc_number, "–§–∞—Å—É–≤–∞–Ω–Ω—è")

            return StandardResponse.error("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è", "UNKNOWN_ACTION")

        except Exception as e:
            logger.log_error("conversion_action_failed", e, {"action": action, "doc_id": doc_id})
            return StandardResponse.error(str(e), "SERVICE_ERROR")


class ProfitabilityReportView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        """–ó–≤—ñ—Ç –ø–æ –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—ñ–≤"""
        date_from = request.query_params.get('date_from')
        date_to = request.query_params.get('date_to')
        product_id = request.query_params.get('product_id')
        warehouse_id = request.query_params.get('warehouse_id')

        # –û–ø–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ–¥–∞–∂—ñ–≤
        sales_ops = Operation.objects.filter(
            direction='out',
            document__doc_type='sale',
            sale_price__isnull=False
        ).select_related('product', 'warehouse', 'document')

        if date_from:
            sales_ops = sales_ops.filter(created_at__gte=date_from)
        if date_to:
            sales_ops = sales_ops.filter(created_at__lte=date_to)
        if product_id:
            sales_ops = sales_ops.filter(product_id=product_id)
        if warehouse_id:
            sales_ops = sales_ops.filter(warehouse_id=warehouse_id)

        # –ê–≥—Ä–µ–≥–∞—Ü—ñ—è –ø–æ —Ç–æ–≤–∞—Ä–∞—Ö
        report_data = []

        products = Product.objects.filter(
            id__in=sales_ops.values_list('product_id', flat=True)
        ).distinct()

        for product in products:
            product_ops = sales_ops.filter(product=product)

            total_quantity = product_ops.aggregate(
                total=Sum('quantity')
            )['total'] or 0

            total_cost = product_ops.aggregate(
                total=Sum('total_cost')
            )['total'] or 0

            total_sale = product_ops.aggregate(
                total=Sum('total_sale')
            )['total'] or 0

            profit = total_sale - total_cost
            margin = (profit / total_sale * 100) if total_sale > 0 else 0

            report_data.append({
                'product_id': product.id,
                'product_name': product.name,
                'quantity_sold': float(total_quantity),
                'total_cost': float(total_cost),
                'total_revenue': float(total_sale),
                'profit': float(profit),
                'margin_percent': round(float(margin), 2),
                'avg_cost_price': float(total_cost / total_quantity) if total_quantity > 0 else 0,
                'avg_sale_price': float(total_sale / total_quantity) if total_quantity > 0 else 0,
            })

        # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ –ø—Ä–∏–±—É—Ç–∫—É
        report_data.sort(key=lambda x: x['profit'], reverse=True)

        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        totals = {
            'total_products': len(report_data),
            'total_quantity': sum(item['quantity_sold'] for item in report_data),
            'total_cost': sum(item['total_cost'] for item in report_data),
            'total_revenue': sum(item['total_revenue'] for item in report_data),
            'total_profit': sum(item['profit'] for item in report_data),
        }

        if totals['total_revenue'] > 0:
            totals['overall_margin'] = round(totals['total_profit'] / totals['total_revenue'] * 100, 2)
        else:
            totals['overall_margin'] = 0

        return StandardResponse.success({
            'items': report_data,
            'totals': totals
        }, "–ó–≤—ñ—Ç –ø–æ –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ")


class StockValueReportView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        """–ó–≤—ñ—Ç –ø–æ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞–ª–∏—à–∫—ñ–≤"""
        from backend.operations.stock import FIFOStockManager

        warehouse_id = request.query_params.get('warehouse_id')
        firm_id = request.query_params.get('firm_id')

        if not firm_id:
            return StandardResponse.error("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ firm_id")

        firm = Firm.objects.get(id=firm_id)

        warehouses = Warehouse.objects.all()
        if warehouse_id:
            warehouses = warehouses.filter(id=warehouse_id)

        report_data = []

        for warehouse in warehouses:
            # –í—Å—ñ —Ç–æ–≤–∞—Ä–∏ —â–æ —î –Ω–∞ —Å–∫–ª–∞–¥—ñ
            products_with_stock = Operation.objects.filter(
                warehouse=warehouse,
                document__firm=firm,
                direction='in',
                visible=True
            ).values_list('product_id', flat=True).distinct()

            warehouse_data = {
                'warehouse_id': warehouse.id,
                'warehouse_name': warehouse.name,
                'products': [],
                'total_value': 0
            }

            for product_id in products_with_stock:
                product = Product.objects.get(id=product_id)

                stock = FIFOStockManager.get_available_stock(product, warehouse, firm)
                if stock > 0:
                    value = FIFOStockManager.get_stock_value(product, warehouse, firm)
                    avg_cost = value / stock if stock > 0 else 0

                    warehouse_data['products'].append({
                        'product_id': product.id,
                        'product_name': product.name,
                        'quantity': float(stock),
                        'avg_cost_price': float(avg_cost),
                        'total_value': float(value)
                    })

                    warehouse_data['total_value'] += float(value)

            if warehouse_data['products']:
                report_data.append(warehouse_data)

        total_value = sum(w['total_value'] for w in report_data)

        return StandardResponse.success({
            'warehouses': report_data,
            'total_value': total_value
        }, "–ó–≤—ñ—Ç –ø–æ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞–ª–∏—à–∫—ñ–≤ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ")


@api_view(['GET'])
def inventory_in_action(request):
    """–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –æ–ø—Ä–∏–±—É—Ç–∫—É–≤–∞–Ω–Ω—è"""
    doc_id = request.query_params.get('id')
    action = request.query_params.get('action')

    try:
        document = Document.objects.get(id=doc_id, doc_type='inventory_in')

        if action == 'progress':
            InventoryInService(document).post()
            return StandardResponse.success(
                {"doc_number": document.doc_number},
                "–û–ø—Ä–∏–±—É—Ç–∫—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≤–µ–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
            )

        return StandardResponse.error("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è")

    except Document.DoesNotExist:
        return StandardResponse.error("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        return StandardResponse.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")


class PriceSettingDocumentDetailView(RetrieveAPIView):
    queryset = PriceSettingDocument.objects.all()
    serializer_class = PriceSettingDocumentSerializer
    permission_classes = [AllowAny]


class ContractsByCustomerView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        customer_id = request.query_params.get('id')

        if not customer_id:
            return Response({"error": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ customer_id"}, status=400)

        try:
            contracts = Contract.objects.filter(
                client_id=customer_id,
                is_active=True
            ).select_related('supplier', 'client', 'payment_type', 'account')

            serializer = ContractSerializer(contracts, many=True)
            return Response(serializer.data)

        except Exception as e:
            return Response({"error": str(e)}, status=500)


class ProductUnitConversionsView(APIView):
    permission_classes = [AllowAny]

    def get(self, request):
        product_id = request.query_params.get('product')

        if not product_id:
            return Response({"error": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ product_id"}, status=400)

        try:
            conversions = ProductUnitConversion.objects.filter(
                product_id=product_id
            ).select_related('product', 'from_unit', 'to_unit')

            data = []
            for conv in conversions:
                data.append({
                    'id': conv.id,
                    'name': conv.name,
                    'product': conv.product.id,
                    'from_unit': conv.from_unit.id,
                    'to_unit': conv.to_unit.id,
                    'factor': conv.factor,
                    'from_unit_name': conv.from_unit.name,
                    'to_unit_name': conv.to_unit.name,
                })

            return Response(data)

        except Exception as e:
            return Response({"error": str(e)}, status=500)


class ProductPricesView(APIView):
    """
    ‚úÖ –ù–û–í–ò–ô endpoint: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ü—ñ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä—É

    GET /api/product-prices/?product=1&firm=1&trade_point=2&price_type=1
    """
    permission_classes = [AllowAny]

    def get(self, request):
        product_id = request.query_params.get('product')
        firm_id = request.query_params.get('firm')
        trade_point_id = request.query_params.get('trade_point')
        price_type_id = request.query_params.get('price_type')

        # ‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if not product_id or not firm_id:
            return StandardResponse.error(
                "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ product —Ç–∞ firm",
                "MISSING_PARAMETERS"
            )

        try:
            product = Product.objects.get(id=product_id)
            firm = Firm.objects.get(id=firm_id)

            trade_point = None
            if trade_point_id:
                trade_point = TradePoint.objects.get(id=trade_point_id)

            price_type = None
            if price_type_id:
                price_type = PriceType.objects.get(id=price_type_id)

        except (Product.DoesNotExist, Firm.DoesNotExist, TradePoint.DoesNotExist, PriceType.DoesNotExist) as e:
            return StandardResponse.error(
                f"–û–± º—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {str(e)}",
                "OBJECT_NOT_FOUND"
            )

        # ‚úÖ –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ü—ñ–Ω–∏
        prices = get_all_prices_for_product(
            product=product,
            firm=firm,
            trade_point=trade_point,
            price_type=price_type
        )

        # ‚úÖ –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –∑–∞–ª–∏—à–∫–∏
        enriched_prices = []
        for price_data in prices:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ª–∏—à–æ–∫ —Ç–æ–≤–∞—Ä—É
            if trade_point and trade_point.firm.warehouse_set.exists():
                warehouse = trade_point.firm.warehouse_set.first()
                stock = FIFOStockManager.get_available_stock(product, warehouse, firm)
            else:
                stock = 0

            price_data['available_stock'] = float(stock)
            price_data['can_sell'] = stock > 0
            enriched_prices.append(price_data)

        return StandardResponse.success(
            data={
                'product': {
                    'id': product.id,
                    'name': product.name,
                    'base_unit': product.unit.name,
                    'base_unit_symbol': product.unit.symbol
                },
                'prices': enriched_prices,
                'total_variants': len(enriched_prices)
            },
            message=f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(enriched_prices)} –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —Ü—ñ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä—É"
        )


class ProductSpecificPriceView(APIView):
    """
    ‚úÖ –ù–û–í–ò–ô endpoint: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞—Å—É–≤–∞–Ω–Ω—è

    GET /api/product-specific-price/?product=1&firm=1&unit_conversion=3&trade_point=2
    """
    permission_classes = [AllowAny]

    def get(self, request):
        product_id = request.query_params.get('product')
        firm_id = request.query_params.get('firm')
        unit_conversion_id = request.query_params.get('unit_conversion')
        trade_point_id = request.query_params.get('trade_point')
        price_type_id = request.query_params.get('price_type')

        if not product_id or not firm_id:
            return StandardResponse.error(
                "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ product —Ç–∞ firm",
                "MISSING_PARAMETERS"
            )

        try:
            product = Product.objects.get(id=product_id)
            firm = Firm.objects.get(id=firm_id)

            unit_conversion = None
            if unit_conversion_id:
                unit_conversion = ProductUnitConversion.objects.get(id=unit_conversion_id)

            trade_point = None
            if trade_point_id:
                trade_point = TradePoint.objects.get(id=trade_point_id)

            price_type = None
            if price_type_id:
                price_type = PriceType.objects.get(id=price_type_id)

        except (Product.DoesNotExist, Firm.DoesNotExist, ProductUnitConversion.DoesNotExist,
                TradePoint.DoesNotExist, PriceType.DoesNotExist) as e:
            return StandardResponse.error(
                f"–û–± º—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {str(e)}",
                "OBJECT_NOT_FOUND"
            )

        # ‚úÖ –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Ü—ñ–Ω—É
        price_data = get_price_from_setting(
            product=product,
            firm=firm,
            trade_point=trade_point,
            price_type=price_type,
            unit_conversion=unit_conversion
        )

        if not price_data:
            return StandardResponse.error(
                "–¶—ñ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –≤–∫–∞–∑–∞–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤",
                "PRICE_NOT_FOUND"
            )

        return StandardResponse.success(
            data=price_data,
            message="–¶—ñ–Ω–∞ –∑–Ω–∞–π–¥–µ–Ω–∞"
        )


# views.py - –î–û–î–ê–¢–ò —Ü–µ–π debug view –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

class ProductPricesDebugView(APIView):
    """
    üîç DEBUG endpoint –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º –∑ —Ü—ñ–Ω–∞–º–∏
    """
    permission_classes = [AllowAny]

    def get(self, request):
        try:
            product_id = request.query_params.get('product')
            firm_id = request.query_params.get('firm')

            if not product_id:
                return StandardResponse.error("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ product_id")

            try:
                product = Product.objects.get(id=product_id)
                firm = Firm.objects.get(id=firm_id) if firm_id else None
            except (Product.DoesNotExist, Firm.DoesNotExist):
                return StandardResponse.error("–¢–æ–≤–∞—Ä –∞–±–æ —Ñ—ñ—Ä–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")

            debug_info = {
                'product_info': {
                    'id': product.id,
                    'name': product.name,
                    'firm_id': getattr(product, 'firm_id', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'),
                    'base_unit': product.unit.name if product.unit else '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
                }
            }

            # –í–µ—Å—å —ñ–Ω—à–∏–π –∫–æ–¥ —è–∫ –≤ –∞—Ä—Ç–∏—Ñ–∞–∫—Ç—ñ...

            return StandardResponse.success(
                data=debug_info,
                message="–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∞"
            )

        except Exception as e:
            return StandardResponse.error(
                f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {str(e)}",
                "INTERNAL_ERROR"
            )


class ProductPricesSimpleDebugView(APIView):
    """–°–ø—Ä–æ—â–µ–Ω–∏–π debug –¥–ª—è –ø–æ—à—É–∫—É –ø—Ä–æ–±–ª–µ–º–∏"""
    permission_classes = [AllowAny]

    def get(self, request):
        product_id = request.query_params.get('product')
        firm_id = request.query_params.get('firm')

        try:
            product = Product.objects.get(id=product_id)
            firm = Firm.objects.get(id=firm_id) if firm_id else None
        except:
            return StandardResponse.error("–¢–æ–≤–∞—Ä –∞–±–æ —Ñ—ñ—Ä–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")

        debug_info = {}

        # 1Ô∏è‚É£ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–≤–∞—Ä
        debug_info['product'] = {
            'id': product.id,
            'name': product.name,
            'firm_id': getattr(product, 'firm_id', None),
            'unit': product.unit.name if product.unit else None
        }

        # 2Ô∏è‚É£ –î–æ–∫—É–º–µ–Ω—Ç–∏ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–ª—è —Ñ—ñ—Ä–º–∏
        if firm:
            docs_count = PriceSettingDocument.objects.filter(firm=firm).count()
            approved_count = PriceSettingDocument.objects.filter(firm=firm, status='approved').count()

            debug_info['documents'] = {
                'total': docs_count,
                'approved': approved_count
            }

            # –û—Å—Ç–∞–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏
            recent_docs = PriceSettingDocument.objects.filter(firm=firm).order_by('-id')[:3]
            debug_info['recent_docs'] = [
                {
                    'id': doc.id,
                    'number': doc.doc_number,
                    'status': doc.status,
                    'valid_from': str(doc.valid_from),
                    'firm_id': doc.firm.id
                }
                for doc in recent_docs
            ]

        # 3Ô∏è‚É£ –ü–æ–∑–∏—Ü—ñ—ó —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–ª—è —Ç–æ–≤–∞—Ä—É
        price_items_count = PriceSettingItem.objects.filter(product=product).count()
        debug_info['price_items_total'] = price_items_count

        if firm:
            price_items_for_firm = PriceSettingItem.objects.filter(product=product, firm=firm).count()
            debug_info['price_items_for_firm'] = price_items_for_firm

        # 4Ô∏è‚É£ –¢–∏–ø–∏ —Ü—ñ–Ω
        price_types = PriceType.objects.all()
        debug_info['price_types'] = [
            {'id': pt.id, 'name': pt.name, 'is_default': pt.is_default}
            for pt in price_types
        ]

        # 5Ô∏è‚É£ –§–∞—Å—É–≤–∞–Ω–Ω—è
        conversions_count = ProductUnitConversion.objects.filter(product=product).count()
        debug_info['conversions_count'] = conversions_count

        return StandardResponse.success(debug_info, "Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")



class ProductSalePreviewView(APIView):
    """
    üîç –ü–û–í–ù–ò–ô –ê–ù–ê–õ–Ü–ó —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø—Ä–æ–¥–∞–∂—É

    GET /api/product-sale-preview/?product=1&firm=1&warehouse=1&quantity=5&unit=2&trade_point=1

    –ü–æ–∫–∞–∑—É—î:
    - –ó–∞–ª–∏—à–∫–∏ —ñ FIFO –ø–∞—Ä—Ç—ñ—ó
    - –î–æ—Å—Ç—É–ø–Ω—ñ —Ü—ñ–Ω–∏ –∑ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è
    - –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–æ–±—ñ–≤–∞—Ä—Ç–æ—Å—Ç—ñ
    - –ü–î–í —Ç–∞ —Ñ–∞—Å—É–≤–∞–Ω–Ω—è
    - –ü—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å
    """
    permission_classes = [AllowAny]

    def get(self, request):
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
        product_id = request.query_params.get('product')
        firm_id = request.query_params.get('firm')
        warehouse_id = request.query_params.get('warehouse')
        quantity = request.query_params.get('quantity', 1)
        unit_id = request.query_params.get('unit')
        trade_point_id = request.query_params.get('trade_point')
        price_type_id = request.query_params.get('price_type')

        if not all([product_id, firm_id, warehouse_id]):
            return StandardResponse.error("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ product, firm, warehouse")

        try:
            product = Product.objects.get(id=product_id)
            firm = Firm.objects.get(id=firm_id)
            warehouse = Warehouse.objects.get(id=warehouse_id)
            quantity = Decimal(str(quantity))

            unit = Unit.objects.get(id=unit_id) if unit_id else product.unit
            trade_point = TradePoint.objects.get(id=trade_point_id) if trade_point_id else None
            price_type = PriceType.objects.get(id=price_type_id) if price_type_id else None

        except (Product.DoesNotExist, Firm.DoesNotExist, Warehouse.DoesNotExist,
                Unit.DoesNotExist, TradePoint.DoesNotExist, PriceType.DoesNotExist) as e:
            return StandardResponse.error(f"–û–±'—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {str(e)}")

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤ –±–∞–∑–æ–≤—É –æ–¥–∏–Ω–∏—Ü—é
        converted_qty = convert_to_base(product, unit, quantity)

        result = {
            'input_parameters': {
                'product_name': product.name,
                'firm_name': firm.name,
                'warehouse_name': warehouse.name,
                'requested_quantity': float(quantity),
                'unit_name': unit.name,
                'converted_quantity_base': float(converted_qty),
                'base_unit': product.unit.name
            }
        }

        # 1Ô∏è‚É£ –ê–ù–ê–õ–Ü–ó –ó–ê–õ–ò–®–ö–Ü–í –¢–ê FIFO
        result['stock_analysis'] = self._analyze_stock_fifo(product, warehouse, firm, converted_qty)

        # 2Ô∏è‚É£ –ê–ù–ê–õ–Ü–ó –¶–Ü–ù –ó –¶–Ü–ù–û–£–¢–í–û–†–ï–ù–ù–Ø
        result['price_analysis'] = self._analyze_pricing(product, firm, trade_point, price_type, unit)

        # 3Ô∏è‚É£ –†–û–ó–†–ê–•–£–ù–û–ö –°–û–ë–Ü–í–ê–†–¢–û–°–¢–Ü
        result['cost_analysis'] = self._analyze_cost(product, warehouse, firm, converted_qty)

        # 4Ô∏è‚É£ –ê–ù–ê–õ–Ü–ó –§–ê–°–£–í–ê–ù–ù–Ø
        result['packaging_analysis'] = self._analyze_packaging(product, unit)

        # 5Ô∏è‚É£ –†–û–ó–†–ê–•–£–ù–û–ö –ü–†–ò–ë–£–¢–ö–û–í–û–°–¢–Ü
        result['profitability_analysis'] = self._analyze_profitability(result)

        # 6Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á
        result['recommendations'] = self._generate_recommendations(result)

        return StandardResponse.success(result, "–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä—É –≤–∏–∫–æ–Ω–∞–Ω–æ")

    def _analyze_stock_fifo(self, product, warehouse, firm, quantity):
        """–ê–Ω–∞–ª—ñ–∑ –∑–∞–ª–∏—à–∫—ñ–≤ —Ç–∞ FIFO –ø–∞—Ä—Ç—ñ–π"""

        # –ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞–ª–∏—à–æ–∫
        total_stock = FIFOStockManager.get_available_stock(product, warehouse, firm)

        # –î–µ—Ç–∞–ª—å–Ω–∏–π FIFO –∞–Ω–∞–ª—ñ–∑
        fifo_sources = Operation.objects.filter(
            product=product,
            warehouse=warehouse,
            document__firm=firm,
            direction='in',
            visible=True
        ).order_by('created_at')

        fifo_details = []
        qty_collected = Decimal('0')

        for source in fifo_sources:
            # –°–∫—ñ–ª—å–∫–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∑ —Ü—ñ—î—ó –ø–∞—Ä—Ç—ñ—ó
            used = Operation.objects.filter(
                source_operation=source,
                direction='out',
                visible=True
            ).aggregate(total=Sum('quantity'))['total'] or 0

            available_from_source = source.quantity - used

            if available_from_source > 0:
                qty_to_take = min(available_from_source, quantity - qty_collected)

                fifo_details.append({
                    'source_operation_id': source.id,
                    'document_number': source.document.doc_number,
                    'document_date': source.created_at.isoformat(),
                    'original_quantity': float(source.quantity),
                    'already_used': float(used),
                    'available': float(available_from_source),
                    'will_use': float(qty_to_take),
                    'cost_price': float(source.cost_price),
                    'cost_for_this_part': float(qty_to_take * source.cost_price)
                })

                qty_collected += qty_to_take

                if qty_collected >= quantity:
                    break

        return {
            'total_available_stock': float(total_stock),
            'requested_quantity': float(quantity),
            'can_sell': total_stock >= quantity,
            'shortage': float(max(0, quantity - total_stock)),
            'fifo_breakdown': fifo_details,
            'total_sources_used': len(fifo_details)
        }

    def _analyze_pricing(self, product, firm, trade_point, price_type, unit):
        """–ê–Ω–∞–ª—ñ–∑ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è"""
        from backend.services.price import get_all_prices_for_product, get_price_from_setting
        from backend.models import ProductUnitConversion

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ–∞—Å—É–≤–∞–Ω–Ω—è
        unit_conversion = None
        if unit != product.unit:
            unit_conversion = ProductUnitConversion.objects.filter(
                product=product,
                to_unit=unit
            ).first()

        # –í—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ü—ñ–Ω–∏
        all_prices = get_all_prices_for_product(product, firm, trade_point, price_type)

        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —Ü—ñ–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Ç–∞–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        specific_price = get_price_from_setting(product, firm, trade_point, price_type, unit_conversion)

        return {
            'all_available_prices': all_prices,
            'selected_price': specific_price,
            'unit_conversion_used': {
                'id': unit_conversion.id if unit_conversion else None,
                'name': unit_conversion.name if unit_conversion else '–ë–∞–∑–æ–≤–∞ –æ–¥–∏–Ω–∏—Ü—è',
                'factor': float(unit_conversion.factor) if unit_conversion else 1.0
            },
            'price_documents_count': PriceSettingDocument.objects.filter(
                firm=firm,
                status='approved'
            ).count()
        }

    def _analyze_cost(self, product, warehouse, firm, quantity):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–æ–±—ñ–≤–∞—Ä—Ç–æ—Å—Ç—ñ"""
        try:
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            avg_cost = FIFOStockManager.get_cost_price_for_quantity(product, warehouse, firm, quantity)
            total_cost = avg_cost * quantity

            # ‚úÖ –î–û–î–ê–Ñ–ú–û: —Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ –æ–¥–∏–Ω–∏—Ü—é –ø—Ä–æ–¥–∞–∂—É (–Ω–µ –±–∞–∑–æ–≤—É)
            # –Ø–∫—â–æ –ø—Ä–æ–¥–∞—î–º–æ –≤ –≥—Ä–∞–º–∞—Ö, —Ç–æ —Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ—Ä–∞—Ö—É–≤–∞—Ç–∏

            return {
                'average_cost_per_base_unit': float(avg_cost),  # 100 –≥—Ä–Ω/–∫–≥
                'average_cost_per_sale_unit': float(avg_cost),  # ‚úÖ –î–û–î–ê–ú–û –õ–û–ì–Ü–ö–£ –ù–ò–ñ–ß–ï
                'total_cost': float(total_cost),
                'calculation_method': 'FIFO',
                'success': True
            }
        except Exception as e:
            return {
                'error': str(e),
                'success': False
            }

    def _analyze_packaging(self, product, unit):
        """–ê–Ω–∞–ª—ñ–∑ —Ñ–∞—Å—É–≤–∞–Ω–Ω—è"""
        conversions = ProductUnitConversion.objects.filter(product=product)

        return {
            'base_unit': {
                'id': product.unit.id,
                'name': product.unit.name,
                'symbol': product.unit.symbol
            },
            'selected_unit': {
                'id': unit.id,
                'name': unit.name,
                'symbol': unit.symbol
            },
            'is_base_unit': unit == product.unit,
            'available_conversions': [
                {
                    'id': conv.id,
                    'name': conv.name,
                    'from_unit': conv.from_unit.name,
                    'to_unit': conv.to_unit.name,
                    'factor': float(conv.factor)
                }
                for conv in conversions
            ]
        }

    def _analyze_profitability(self, result):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ"""
        try:
            cost_data = result['cost_analysis']
            price_data = result['price_analysis']['selected_price']
            input_params = result['input_parameters']

            if not cost_data['success'] or not price_data:
                return {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É'}

            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–æ–±—ñ–≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é –ø—Ä–æ–¥–∞–∂—É
            requested_qty = Decimal(str(input_params['requested_quantity']))
            converted_qty = Decimal(str(input_params['converted_quantity_base']))

            sale_price_per_unit = Decimal(str(price_data['price']))  # —Ü—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é –ø—Ä–æ–¥–∞–∂—É (–≥—Ä–∞–º)
            base_cost_per_kg = Decimal(str(cost_data['average_cost_per_base_unit']))  # —Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ –∫–≥

            # ‚úÖ –†–û–ó–†–ê–•–û–í–£–Ñ–ú–û —Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ –æ–¥–∏–Ω–∏—Ü—é –ø—Ä–æ–¥–∞–∂—É
            if converted_qty > 0 and requested_qty > 0:
                # –°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î 1 –æ–¥–∏–Ω–∏—Ü—è –ø—Ä–æ–¥–∞–∂—É (1 –≥—Ä–∞–º)
                cost_per_sale_unit = (base_cost_per_kg * converted_qty) / requested_qty
            else:
                cost_per_sale_unit = base_cost_per_kg

            # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –∑–∞ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            total_revenue = sale_price_per_unit * requested_qty
            total_cost = cost_per_sale_unit * requested_qty
            profit = total_revenue - total_cost
            margin = (profit / total_revenue * 100) if total_revenue > 0 else 0

            return {
                'sale_price_per_unit': float(sale_price_per_unit),
                'cost_price_per_unit': float(cost_per_sale_unit),  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û
                'profit_per_unit': float(sale_price_per_unit - cost_per_sale_unit),
                'total_revenue': float(total_revenue),
                'total_cost': float(total_cost),
                'total_profit': float(profit),
                'margin_percent': float(margin),
                'is_profitable': profit > 0,
                # ‚úÖ –î–û–î–ê–Ñ–ú–û DEBUG INFO
                'debug': {
                    'base_cost_per_kg': float(base_cost_per_kg),
                    'requested_qty': float(requested_qty),
                    'converted_qty_kg': float(converted_qty),
                    'calculation': f"{float(base_cost_per_kg)} * {float(converted_qty)} / {float(requested_qty)} = {float(cost_per_sale_unit)}"
                }
            }
        except Exception as e:
            return {'error': str(e)}

    def _generate_recommendations(self, result):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π"""
        recommendations = []

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–∏—à–∫—ñ–≤
        if not result['stock_analysis']['can_sell']:
            recommendations.append({
                'type': 'warning',
                'message': f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–∞–ª–∏—à–∫—É! –ü–æ—Ç—Ä—ñ–±–Ω–æ: {result['stock_analysis']['requested_quantity']}, —î: {result['stock_analysis']['total_available_stock']}"
            })

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–Ω
        if not result['price_analysis']['selected_price']:
            recommendations.append({
                'type': 'error',
                'message': '–¶—ñ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—ñ! –î–æ–¥–∞–π—Ç–µ —Ü—ñ–Ω—É –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É.'
            })

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ
        prof = result.get('profitability_analysis', {})
        if 'margin_percent' in prof:
            if prof['margin_percent'] < 10:
                recommendations.append({
                    'type': 'warning',
                    'message': f"–ù–∏–∑—å–∫–∞ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å: {prof['margin_percent']:.1f}%"
                })
            elif prof['margin_percent'] > 50:
                recommendations.append({
                    'type': 'info',
                    'message': f"–í–∏—Å–æ–∫–∞ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å: {prof['margin_percent']:.1f}%"
                })

        return recommendations


@api_view(['GET'])
def get_product_packaging(request, product_id):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞—Å—É–≤–∞–Ω—å –¥–ª—è —Ç–æ–≤–∞—Ä—É"""
    try:
        product = Product.objects.get(id=product_id)

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ñ–∞—Å—É–≤–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É
        packagings = ProductUnitConversion.objects.filter(
            product=product
        ).select_related('from_unit', 'to_unit').values(
            'id', 'factor',
            'from_unit__name', 'from_unit__symbol',
            'to_unit__name', 'to_unit__symbol'
        )

        return Response({
            'success': True,
            'product': {
                'id': product.id,
                'name': product.name,
                'base_unit': {
                    'name': product.unit.name,
                    'symbol': product.unit.symbol
                }
            },
            'packagings': list(packagings)
        })

    except Product.DoesNotExist:
        return Response({
            'success': False,
            'error': '–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
        }, status=404)
    except Exception as e:
        return Response({
            'success': False,
            'error': str(e)
        }, status=500)



class TrialBalanceView(APIView):
    """–û–±–æ—Ä–æ—Ç–Ω–æ-—Å–∞–ª—å–¥–æ–≤–∞ –≤—ñ–¥–æ–º—ñ—Å—Ç—å"""
    permission_classes = [AllowAny]

    def get(self, request):
        company_id = request.query_params.get('company')
        date_to = request.query_params.get('date_to', date.today())

        try:
            from .models import Company
            company = Company.objects.get(id=company_id)

            balance = FinancialReportsService.get_trial_balance(company, date_to)
            return StandardResponse.success(balance, "–û–±–æ—Ä–æ—Ç–Ω–æ-—Å–∞–ª—å–¥–æ–≤–∞ –≤—ñ–¥–æ–º—ñ—Å—Ç—å")

        except Exception as e:
            return StandardResponse.error(str(e))


class BalanceSheetView(APIView):
    """–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å—å–∫–∏–π –±–∞–ª–∞–Ω—Å"""
    permission_classes = [AllowAny]

    def get(self, request):
        company_id = request.query_params.get('company')
        date_to = request.query_params.get('date_to', date.today())

        try:
            from .models import Company
            company = Company.objects.get(id=company_id)

            balance_sheet = FinancialReportsService.get_balance_sheet(company, date_to)
            return StandardResponse.success(balance_sheet, "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å—å–∫–∏–π –±–∞–ª–∞–Ω—Å")

        except Exception as e:
            return StandardResponse.error(str(e))


class ProfitLossView(APIView):
    """–ó–≤—ñ—Ç –ø—Ä–æ –ø—Ä–∏–±—É—Ç–∫–∏ —Ç–∞ –∑–±–∏—Ç–∫–∏"""
    permission_classes = [AllowAny]

    def get(self, request):
        company_id = request.query_params.get('company')
        date_from = request.query_params.get('date_from')
        date_to = request.query_params.get('date_to')

        if not all([company_id, date_from, date_to]):
            return StandardResponse.error("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ company, date_from, date_to")

        try:
            from .models import Company
            company = Company.objects.get(id=company_id)

            report = FinancialReportsService.get_profit_loss(company, date_from, date_to)
            return StandardResponse.success(report, "–ó–≤—ñ—Ç –ø—Ä–æ –ø—Ä–∏–±—É—Ç–∫–∏ —Ç–∞ –∑–±–∏—Ç–∫–∏")

        except Exception as e:
            return StandardResponse.error(str(e))


class CostCenterAnalysisView(APIView):
    """–ê–Ω–∞–ª—ñ–∑ –ø–æ —Ü–µ–Ω—Ç—Ä–∞—Ö –≤–∏—Ç—Ä–∞—Ç"""
    permission_classes = [AllowAny]

    def get(self, request):
        company_id = request.query_params.get('company')
        date_from = request.query_params.get('date_from')
        date_to = request.query_params.get('date_to')

        try:
            from .models import Company
            company = Company.objects.get(id=company_id)

            analysis = CostCenterService.get_cost_analysis(company, date_from, date_to)
            return StandardResponse.success(analysis, "–ê–Ω–∞–ª—ñ–∑ —Ü–µ–Ω—Ç—Ä—ñ–≤ –≤–∏—Ç—Ä–∞—Ç")

        except Exception as e:
            return StandardResponse.error(str(e))


class ExchangeRatesView(APIView):
    """–ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç"""
    permission_classes = [AllowAny]

    def get(self, request):
        """–ü–æ—Ç–æ—á–Ω—ñ –∫—É—Ä—Å–∏"""
        try:
            rates = ExchangeRate.objects.filter(
                date=date.today()
            ).select_related('currency')

            data = [{
                'currency_code': rate.currency.code,
                'currency_name': rate.currency.name,
                'rate': rate.rate,
                'date': rate.date,
                'source': rate.source
            } for rate in rates]

            return StandardResponse.success(data, "–ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç")

        except Exception as e:
            return StandardResponse.error(str(e))

    def post(self, request):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ –∑ –ù–ë–£"""
        try:
            result = CurrencyService.get_nbu_rates()

            if result['success']:
                return StandardResponse.success(
                    {'updated_rates': result['created']},
                    f"–û–Ω–æ–≤–ª–µ–Ω–æ {result['created']} –∫—É—Ä—Å—ñ–≤"
                )
            else:
                return StandardResponse.error(result['error'])

        except Exception as e:
            return StandardResponse.error(str(e))


class BudgetExecutionView(APIView):
    """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É"""
    permission_classes = [AllowAny]

    def get(self, request):
        budget_period_id = request.query_params.get('budget_period')

        try:

            budget_period = BudgetPeriod.objects.get(id=budget_period_id)

            execution = BudgetService.get_budget_execution(budget_period)
            return StandardResponse.success(execution, "–í–∏–∫–æ–Ω–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É")

        except Exception as e:
            return StandardResponse.error(str(e))


class CashFlowForecastView(APIView):
    """–ü—Ä–æ–≥–Ω–æ–∑ –≥—Ä–æ—à–æ–≤–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤"""
    permission_classes = [AllowAny]

    def get(self, request):
        company_id = request.query_params.get('company')
        date_from = request.query_params.get('date_from', date.today())
        date_to = request.query_params.get('date_to')

        if not date_to:
            date_to = date.today() + timedelta(days=90)

        try:
            from .models import Company
            company = Company.objects.get(id=company_id)

            forecast = CashFlowService.get_cashflow_report(company, date_from, date_to)
            return StandardResponse.success(forecast, "–ü—Ä–æ–≥–Ω–æ–∑ cashflow")

        except Exception as e:
            return StandardResponse.error(str(e))

    def post(self, request):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É"""
        company_id = request.data.get('company')
        days_ahead = request.data.get('days_ahead', 90)

        try:
            from .models import Company
            company = Company.objects.get(id=company_id)

            CashFlowService.generate_forecast(company, days_ahead)
            return StandardResponse.success(None, "–ü—Ä–æ–≥–Ω–æ–∑ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ")

        except Exception as e:
            return StandardResponse.error(str(e))


class LiquidityRiskView(APIView):
    """–ê–Ω–∞–ª—ñ–∑ —Ä–∏–∑–∏–∫—É –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ"""
    permission_classes = [AllowAny]

    def get(self, request):
        company_id = request.query_params.get('company')
        days_ahead = int(request.query_params.get('days_ahead', 30))

        try:
            from .models import Company
            company = Company.objects.get(id=company_id)

            risk_analysis = CashFlowService.check_liquidity_risk(company, days_ahead)
            return StandardResponse.success(risk_analysis, "–ê–Ω–∞–ª—ñ–∑ —Ä–∏–∑–∏–∫—É –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ")

        except Exception as e:
            return StandardResponse.error(str(e))