# services/document_services.py (–∑ –ø–æ–≤–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º)
from decimal import Decimal

from django.core.exceptions import ValidationError
from django.db import transaction
from django.db.models import Sum, Q

from backend.models import Operation, DocumentItem
from backend.operations.stock import FIFOStockManager
from backend.services.validators import DocumentValidator
from backend.services.logger import AuditLoggerService
from backend.utils.unit_converter import convert_to_base
from settlements.models import MoneyOperation, MoneyDocument
from settlements.services.accounting_service import AccountingService
from settlements.services.auto_money_service import AutoMoneyDocumentService


class BaseDocumentService:
    def __init__(self, document):
        self.document = document
        self.logger = AuditLoggerService(document=document)

    def post(self):
        raise NotImplementedError("Method `post` must be implemented.")

    def unpost(self):
        raise NotImplementedError("Method `unpost` must be implemented.")

# üßæ –í–∏—Ä–∞—Ö–æ–≤—É—î –ü–î–í –Ω–∞ —Ä—ñ–≤–Ω—ñ DocumentItem

def apply_vat(item, mode="from_price_without_vat"):
    vat = Decimal(item.vat_percent or 0)
    price = Decimal(item.price)

    if mode == "from_price_with_vat":
        item.price_with_vat = price
        item.vat_amount = round(price * vat / (100 + vat), 2)
        item.price_without_vat = round(price - item.vat_amount, 2)
    else:
        item.price_without_vat = price
        item.vat_amount = round(price * vat / 100, 2)
        item.price_with_vat = round(price + item.vat_amount, 2)

    item.save(update_fields=["price_with_vat", "price_without_vat", "vat_amount", "vat_percent"])




class ReceiptService(BaseDocumentService):
    def post(self):
        if self.document.status == 'posted':
            self.logger.log_event("already_posted", f"–°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {self.document.doc_number}")
            raise ValidationError("–î–æ–∫—É–º–µ–Ω—Ç –≤–∂–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ.")

        DocumentValidator(self.document).check_can_post()

        # ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç—É
        if self.document.contract and self.document.contract.contract_type == '–û–ø–ª–∞—Ç–∞ –Ω–∞–ø–µ—Ä–µ–¥':
            raise ValidationError("–ü–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –æ–±–æ–≤ º—è–∑–∫–æ–≤–∞ –∑–≥—ñ–¥–Ω–æ –∑ —É–º–æ–≤–∞–º–∏ –¥–æ–≥–æ–≤–æ—Ä—É.")

        for item in self.document.items.all():
            converted_qty = convert_to_base(item.product, item.unit, item.quantity)
            item.converted_quantity = converted_qty

            if item.price_with_vat and not item.vat_amount:
                apply_vat(item, mode="from_price_with_vat")
            else:
                apply_vat(item)

            item.save(update_fields=["converted_quantity"])

            Operation.objects.create(
                document=self.document,
                product=item.product,
                quantity=converted_qty,
                price=item.price,
                warehouse=self.document.warehouse,
                direction='in',
                visible=True
            )
            self.logger.log_event("receipt_item_posted", f"–ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è: {item.product.name} x {item.quantity}")

        self.document.status = 'posted'
        self.document.save()
        self.logger.log_event("receipt_posted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

        AutoMoneyDocumentService.create_from_document(self.document)

    def unpost(self):
        if self.document.status != 'posted':
            self.logger.log_event("not_posted", f"–°–ø—Ä–æ–±–∞ —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {self.document.doc_number}")
            raise ValidationError("–î–æ–∫—É–º–µ–Ω—Ç —â–µ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ, —Ç–æ–º—É —Ä–æ–∑–ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ–º–æ–∂–ª–∏–≤–æ.")

        DocumentValidator(self.document).check_can_unpost()

        Operation.objects.filter(document=self.document).delete()
        self.logger.log_event("receipt_unposted", f"–û–ø–µ—Ä–∞—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞ {self.document.doc_number} –≤–∏–¥–∞–ª–µ–Ω—ñ")

        self.document.status = 'draft'
        self.document.save()
        self.logger.log_event("receipt_draft", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —á–µ—Ä–Ω–µ—Ç–∫—É")



class ReturnToSupplierService(BaseDocumentService):
    def post(self):
        if self.document.status == 'posted':
            self.logger.log_event("already_posted",
                                  f"–°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {self.document.doc_number}")
            raise ValidationError("–î–æ–∫—É–º–µ–Ω—Ç –≤–∂–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ.")

        DocumentValidator(self.document).check_can_post()

        source = self.document.source_document
        if not source or source.doc_type != 'receipt':
            raise ValidationError("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –¥—ñ–π—Å–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –ü–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è —è–∫ –¥–∂–µ—Ä–µ–ª–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è.")

        for item in self.document.items.all():
            converted_qty = convert_to_base(item.product, item.unit, item.quantity)
            apply_vat(item)
            item.converted_quantity = converted_qty
            item.save(update_fields=["converted_quantity"])

            total_received = Operation.objects.filter(
                document=source,
                product=item.product,
                direction='in',
                visible=True
            ).aggregate(total=Sum('quantity'))['total'] or 0

            total_returned = Operation.objects.filter(
                document__doc_type='return_to_supplier',
                document__source_document=source,
                product=item.product,
                direction='out'
            ).aggregate(total=Sum('quantity'))['total'] or 0

            max_returnable = total_received - total_returned

            if item.quantity > max_returnable:
                raise ValidationError([
                    f"–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è '{item.product.name}' –ø–µ—Ä–µ–≤–∏—â—É—î –¥–æ—Å—Ç—É–ø–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å. –û—Ç—Ä–∏–º–∞–Ω–æ: {total_received}, –ø–æ–≤–µ—Ä–Ω—É—Ç–æ: {total_returned}, –¥–æ–∑–≤–æ–ª–µ–Ω–æ: {max_returnable}."
                ])

            Operation.objects.create(
                document=self.document,
                product=item.product,
                quantity=converted_qty,
                price=item.price,
                warehouse=self.document.warehouse,
                direction='out',
                visible=True
            )
            self.logger.log_event("return_supplier_item", f"–ü–æ–≤–µ—Ä–Ω–µ–Ω–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É: {item.product.name} x {item.quantity}")

        self.document.status = 'posted'
        self.document.save()
        self.logger.log_event("return_supplier_posted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

    def unpost(self):
        if self.document.status != 'posted':
            raise ValidationError("–î–æ–∫—É–º–µ–Ω—Ç —â–µ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ, —Ç–æ–º—É —Ä–æ–∑–ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ–º–æ–∂–ª–∏–≤–æ.")

        DocumentValidator(self.document).check_can_unpost()

        Operation.objects.filter(document=self.document).delete()
        self.logger.log_event("return_supplier_unposted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

        self.document.status = 'draft'
        self.document.save()
        self.logger.log_event("return_supplier_draft", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —á–µ—Ä–Ω–µ—Ç–∫—É")


class TransferService(BaseDocumentService):
    def post(self):
        if self.document.status == 'posted':
            self.logger.log_event("already_posted",
                                  f"–°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {self.document.doc_number}")
            raise ValidationError("–î–æ–∫—É–º–µ–Ω—Ç –≤–∂–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ.")

        DocumentValidator(self.document).check_can_post()
        target_warehouse = self.document.target_warehouse

        for item in self.document.items.all():
            stock = FIFOStockManager.get_available_stock(
                product=item.product,
                warehouse=self.document.warehouse,
                firm=self.document.firm  # ‚¨ÖÔ∏è –¥–æ–¥–∞–Ω–æ
            )
            if stock < item.quantity:
                raise ValidationError(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–∞–ª–∏—à–∫—É –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è: {item.product.name}. –Ñ: {stock}, –ø–æ—Ç—Ä—ñ–±–Ω–æ: {item.quantity}"
                )

        for item in self.document.items.all():
            converted_qty = convert_to_base(item.product, item.unit, item.quantity)
            apply_vat(item)
            item.converted_quantity = converted_qty
            item.save(update_fields=["converted_quantity"])

            Operation.objects.create(
                document=self.document,
                product=item.product,
                quantity=converted_qty,
                price=item.price,
                warehouse=self.document.warehouse,
                direction='out',
                visible=True
            )
            Operation.objects.create(
                document=self.document,
                product=item.product,
                quantity=converted_qty,
                price=item.price,
                warehouse=target_warehouse,
                direction='in',
                visible=True
            )
            self.logger.log_event("transfer_item", f"–ü–µ—Ä–µ–º—ñ—â–µ–Ω–æ {item.product.name} x {item.quantity} –∑—ñ —Å–∫–ª–∞–¥—É {self.document.warehouse.name} –¥–æ {target_warehouse.name}")

        self.document.status = 'posted'
        self.document.save()
        self.logger.log_event("transfer_posted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

    def unpost(self):
        if self.document.status != 'posted':
            raise ValidationError("–î–æ–∫—É–º–µ–Ω—Ç —â–µ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ, —Ç–æ–º—É —Ä–æ–∑–ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ–º–æ–∂–ª–∏–≤–æ.")

        DocumentValidator(self.document).check_can_unpost()
        Operation.objects.filter(document=self.document).delete()
        self.document.status = 'draft'
        self.document.save()
        self.logger.log_event("transfer_unposted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ")



class SaleService(BaseDocumentService):
    def post(self):
        if self.document.status == 'posted':
            self.logger.log_event("already_posted",
                                  f"–°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {self.document.doc_number}")
            raise ValidationError("–î–æ–∫—É–º–µ–Ω—Ç –≤–∂–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ.")

        DocumentValidator(self.document).check_can_post()

        for item in self.document.items.all():
            converted_qty = convert_to_base(item.product, item.unit, item.quantity)
            item.converted_quantity = converted_qty

            if item.price_with_vat and not item.vat_amount:
                apply_vat(item, mode="from_price_with_vat")
            else:
                apply_vat(item)

            item.save(update_fields=["converted_quantity"])

            FIFOStockManager.sell_fifo(
                document=self.document,
                product=item.product,
                warehouse=self.document.warehouse,
                quantity=converted_qty,
            )
            self.logger.log_event("sale_item", f"–†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {item.product.name} x {item.quantity}")

        self.document.status = 'posted'
        self.document.save()
        self.logger.log_event("sale_posted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

        AccountingService(self.document).generate_entries()
        AutoMoneyDocumentService.create_from_document(self.document)

    def _auto_create_payment(self):
        payment_type = self.document.payment_type
        if not payment_type or payment_type.name not in ["–ì–æ—Ç—ñ–≤–∫–∞", "–ë–µ–∑–≥–æ—Ç—ñ–≤–∫–∞"]:
            return

        doc_type = 'cash_income' if payment_type.name == "–ì–æ—Ç—ñ–≤–∫–∞" else 'bank_income'

        from settlements.models import Account
        account = Account.objects.filter(
            company=self.document.company,
            type='cash' if doc_type == 'cash_income' else 'bank'
        ).first()

        if not account:
            return

        amount = sum(item.quantity * item.price for item in self.document.items.all())

        money_doc = MoneyDocument.objects.create(
            doc_type=doc_type,
            company=self.document.company,
            firm=self.document.firm,
            comment=f"–û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é {self.document.doc_number}",
            source_document=self.document,
            customer=self.document.customer,
            account=account,
            amount=amount,
            status='posted'
        )

        MoneyOperation.objects.create(
            document=money_doc,
            amount=amount,
            direction='in',
            account=account,
            source_document=self.document,
            customer=self.document.customer,
            visible=True
        )

        from settlements.models import MoneyLedgerEntry
        MoneyLedgerEntry.objects.create(
            document=money_doc,
            date=money_doc.date,
            debit_account=301,
            credit_account=361,
            amount=amount,
            comment=f"–ê–≤—Ç–æ–ø—Ä–æ–≤–æ–¥–∫–∞ –ø–æ {money_doc.doc_number}",
            customer=self.document.customer
        )

        self.logger.log_event("auto_payment_created", f"–°—Ç–≤–æ—Ä–µ–Ω–æ –æ–ø–ª–∞—Ç—É {money_doc.doc_number}")



class ReturnFromClientService(BaseDocumentService):
    def post(self):
        if self.document.status == 'posted':
            self.logger.log_event("already_posted",
                                  f"–°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {self.document.doc_number}")
            raise ValidationError("–î–æ–∫—É–º–µ–Ω—Ç –≤–∂–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ.")

        DocumentValidator(self.document).check_can_post()

        source = self.document.source_document

        if not source or source.doc_type != 'sale':
            raise ValidationError("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó, –∑ —è–∫–æ–≥–æ –∫–ª—ñ—î–Ω—Ç –ø–æ–≤–µ—Ä—Ç–∞—î —Ç–æ–≤–∞—Ä.")

        for item in self.document.items.all():
            converted_qty = convert_to_base(item.product, item.unit, item.quantity)
            apply_vat(item)
            item.converted_quantity = converted_qty
            item.save(update_fields=["converted_quantity"])

            source_item = source.items.filter(product=item.product).first()
            if not source_item:
                raise ValidationError([f"–¢–æ–≤–∞—Ä '{item.product.name}' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –¥–æ–∫—É–º–µ–Ω—Ç—ñ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó."])

            total_returned = Operation.objects.filter(
                document__doc_type='return_from_client',
                document__source_document=source,
                product=item.product,
                direction='in'
            ).aggregate(total=Sum('quantity'))['total'] or 0

            max_returnable = source_item.quantity - total_returned

            if item.quantity > max_returnable:
                raise ValidationError([
                    f"–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è '{item.product.name}' –ø–µ—Ä–µ–≤–∏—â—É—î —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å. "
                    f"–ü—Ä–æ–¥–∞–Ω–æ: {source_item.quantity}, –≤–∂–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ: {total_returned}, "
                    f"–¥–æ–∑–≤–æ–ª–µ–Ω–æ: {max_returnable}."
                ])

            Operation.objects.create(
                document=self.document,
                product=item.product,
                quantity=converted_qty,
                price=item.price,
                warehouse=self.document.warehouse,
                direction='in',
                visible=True
            )
            self.logger.log_event("return_client_item", f"–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞: {item.product.name} x {item.quantity}")

        self.document.status = 'posted'
        self.document.save()
        self.logger.log_event("return_client_posted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

    def unpost(self):
        if self.document.status != 'posted':
            raise ValidationError("–î–æ–∫—É–º–µ–Ω—Ç —â–µ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ, —Ç–æ–º—É —Ä–æ–∑–ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ–º–æ–∂–ª–∏–≤–æ.")

        DocumentValidator(self.document).check_can_unpost()

        Operation.objects.filter(document=self.document).delete()
        self.document.status = 'draft'
        self.document.save()
        self.logger.log_event("return_client_unposted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ")


class InventoryService(BaseDocumentService):
    def post(self):
        if self.document.status == 'posted':
            self.logger.log_event("already_posted",
                                  f"–°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {self.document.doc_number}")
            raise ValidationError("–î–æ–∫—É–º–µ–Ω—Ç –≤–∂–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ.")

        DocumentValidator(self.document).check_can_post()

        for item in self.document.items.all():
            converted_qty = convert_to_base(item.product, item.unit, item.quantity)
            apply_vat(item)
            item.converted_quantity = converted_qty
            item.save(update_fields=["converted_quantity"])

            product = item.product
            warehouse = self.document.warehouse
            firm = self.document.firm

            incoming = Operation.objects.filter(
                product=product,
                warehouse=warehouse,
                document__firm=firm,
                direction='in',
                visible=True
            ).aggregate(total=Sum('quantity'))['total'] or 0

            outgoing = Operation.objects.filter(
                product=product,
                warehouse=warehouse,
                document__firm=firm,
                direction='out',
                visible=True
            ).aggregate(total=Sum('quantity'))['total'] or 0

            balance = incoming - outgoing
            diff = converted_qty - balance

            if diff == 0:
                continue

            Operation.objects.create(
                document=self.document,
                product=product,
                quantity=abs(diff),
                price=item.price,
                warehouse=warehouse,
                direction='in' if diff > 0 else 'out',
                visible=True
            )
            self.logger.log_event("inventory_adjustment", f"–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—è: {product.name}, –∑–º—ñ–Ω–∞: {diff}")

        self.document.status = 'posted'
        self.document.save()
        self.logger.log_event("inventory_posted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

    def unpost(self):
        if self.document.status != 'posted':
            raise ValidationError("–î–æ–∫—É–º–µ–Ω—Ç —â–µ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ, —Ç–æ–º—É —Ä–æ–∑–ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ–º–æ–∂–ª–∏–≤–æ.")

        DocumentValidator(self.document).check_can_unpost()

        Operation.objects.filter(document=self.document).delete()
        self.document.status = 'draft'
        self.document.save()
        self.logger.log_event("inventory_unposted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ")




class StockInDocumentService:
    def __init__(self, document):
        self.document = document

    def post(self):
        if self.document.status == 'posted':
            raise ValidationError("–î–æ–∫—É–º–µ–Ω—Ç –≤–∂–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–π.")

        with transaction.atomic():
            for item in self.document.items.all():
                converted_qty = convert_to_base(item.product, item.unit, item.quantity)
                apply_vat(item)
                item.converted_quantity = converted_qty
                item.save(update_fields=["converted_quantity"])

                Operation.objects.create(
                    document=self.document,
                    product=item.product,
                    quantity=converted_qty,
                    price=item.price,
                    warehouse=self.document.warehouse,
                    direction='in',
                    visible=True
                )

            self.document.status = 'posted'
            self.document.save()

    def unpost(self):
        if self.document.status != 'posted':
            raise ValidationError("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–π.")

        with transaction.atomic():
            operations = Operation.objects.filter(document=self.document, direction='in')

            for op in operations:
                used_qty = Operation.objects.filter(
                    source_operation=op,
                    direction='out',
                    visible=True
                ).count()

                if used_qty > 0:
                    raise ValidationError(f"–ü–∞—Ä—Ç—ñ—è {op.id} –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ —É —Å–ø–∏—Å–∞–Ω–Ω—ñ. –ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–ø—Ä–æ–≤–µ—Å—Ç–∏.")

            operations.delete()
            self.document.status = 'draft'
            self.document.save()


class ConversionDocumentService:
    def __init__(self, document):
        self.document = document

    def post(self):
        for item in self.document.items.all():
            direction = 'out' if item.role == 'input' else 'in'
            Operation.objects.create(
                document=self.document,
                product=item.product,
                quantity=item.quantity,
                price=item.price,
                warehouse=self.document.warehouse,
                direction=direction,
                visible=True,
            )
        self.document.status = 'posted'
        self.document.save()