# services/document_services.py (–∑ –ø–æ–≤–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º)
from decimal import Decimal
from django.db import transaction
from django.db.models import Sum, Q

from backend.exceptions import (
    InsufficientStockError,
    DocumentAlreadyPostedException,
    DocumentNotPostedException,
    ValidationError,
    InvalidDocumentTypeError,
    InvalidReturnQuantityError,
    MissingSourceDocumentError,
    ConversionValidationError
)
from backend.services.logger import AuditLoggerService, PerformanceLogger

from backend.models import Operation
from backend.operations.stock import FIFOStockManager
from backend.services.validators import DocumentValidator
from backend.services.logger import AuditLoggerService
from backend.utils.unit_converter import convert_to_base
from settlements.models import MoneyOperation, MoneyDocument
from settlements.services.accounting_service import AccountingService
from settlements.services.auto_money_service import AutoMoneyDocumentService


class BaseDocumentService:
    def __init__(self, document, request=None):
        self.document = document
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π logger
        if request:
            self.logger = AuditLoggerService.create_from_request(request, document=document)
        else:
            self.logger = AuditLoggerService(document=document)

    def post(self):
        raise NotImplementedError("Method `post` must be implemented.")

    def unpost(self):
        raise NotImplementedError("Method `unpost` must be implemented.")

# üßæ –í–∏—Ä–∞—Ö–æ–≤—É—î –ü–î–í –Ω–∞ —Ä—ñ–≤–Ω—ñ DocumentItem

def apply_vat(item, mode="from_price_with_vat"):
    """
    –í–ò–ü–†–ê–í–õ–ï–ù–ê —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ü–î–í
    mode:
    - "from_price_with_vat" - —Ü—ñ–Ω–∞ –≤–∫–ª—é—á–∞—î –ü–î–í (—Ä–æ–∑–¥—ñ–ª—è—î–º–æ)
    - "from_price_without_vat" - —Ü—ñ–Ω–∞ –±–µ–∑ –ü–î–í (–¥–æ–¥–∞—î–º–æ –ü–î–í)
    """
    from backend.models import AccountingSettings

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ñ—ñ—Ä–º–∏
    firm = item.document.firm

    # –§–û–ü –Ω–µ –ø–ª–∞—Ç–∏—Ç—å –ü–î–í
    if firm.vat_type == '–§–û–ü':
        item.vat_percent = 0
        item.vat_amount = 0
        item.price_without_vat = item.price
        item.price_with_vat = item.price
        item.save(update_fields=["price_with_vat", "price_without_vat", "vat_amount", "vat_percent"])
        return

    # –¢–û–í/–¢–ó–û–í/–ü–ê–¢ –ø–ª–∞—Ç—è—Ç—å –ü–î–í
    if item.vat_percent is not None:
        vat_rate = Decimal(item.vat_percent)
    else:
        try:
            settings = AccountingSettings.objects.get(company=item.document.company)
            vat_rate = settings.default_vat_rate
            item.vat_percent = vat_rate
        except AccountingSettings.DoesNotExist:
            vat_rate = Decimal(20)
            item.vat_percent = vat_rate

    price = Decimal(item.price)

    if mode == "from_price_with_vat":
        # –¶—ñ–Ω–∞ –í–ö–õ–Æ–ß–ê–Ñ –ü–î–í - —Ä–æ–∑–¥—ñ–ª—è—î–º–æ
        item.price_with_vat = price
        item.vat_amount = round(price * vat_rate / (100 + vat_rate), 2)
        item.price_without_vat = round(price - item.vat_amount, 2)
    else:
        # –¶—ñ–Ω–∞ –ë–ï–ó –ü–î–í - –¥–æ–¥–∞—î–º–æ –ü–î–í
        item.price_without_vat = price
        item.vat_amount = round(price * vat_rate / 100, 2)
        item.price_with_vat = round(price + item.vat_amount, 2)

    item.save(update_fields=["price_with_vat", "price_without_vat", "vat_amount", "vat_percent"])


class ReceiptService(BaseDocumentService):
    def post(self):
        try:
            if self.document.status == 'posted':
                self.logger.log_business_logic_error(
                    "receipt_already_posted",
                    "–°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                    {"doc_number": self.document.doc_number, "current_status": self.document.status}
                )
                raise DocumentAlreadyPostedException()

            DocumentValidator(self.document).check_can_post()

            # ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç—É
            if self.document.contract and self.document.contract.contract_type == '–û–ø–ª–∞—Ç–∞ –Ω–∞–ø–µ—Ä–µ–¥':
                self.logger.log_business_logic_error(
                    "prepayment_required",
                    "–ü–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞ –∑–≥—ñ–¥–Ω–æ –∑ —É–º–æ–≤–∞–º–∏ –¥–æ–≥–æ–≤–æ—Ä—É",
                    {"contract_id": self.document.contract.id,
                     "contract_type": self.document.contract.contract_type}
                )
                raise ValidationError("–ü–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –æ–±–æ–≤ º—è–∑–∫–æ–≤–∞ –∑–≥—ñ–¥–Ω–æ –∑ —É–º–æ–≤–∞–º–∏ –¥–æ–≥–æ–≤–æ—Ä—É.")

            for item in self.document.items.all():
                converted_qty = convert_to_base(item.product, item.unit, item.quantity)
                item.converted_quantity = converted_qty

                if item.price_with_vat and not item.vat_amount:
                    apply_vat(item, mode="from_price_with_vat")
                else:
                    apply_vat(item)

                item.save(update_fields=["converted_quantity"])

                # ‚¨áÔ∏è –ù–û–í–ê –õ–û–ì–Ü–ö–ê: —Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å = —Ü—ñ–Ω–∞ –∑–∞–∫—É–ø–∫–∏
                Operation.objects.create(
                    document=self.document,
                    product=item.product,
                    quantity=converted_qty,
                    cost_price=item.price_without_vat,  # ‚¨ÖÔ∏è –°–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å = —Ü—ñ–Ω–∞ –∑–∞–∫—É–ø–∫–∏ –±–µ–∑ –ü–î–í
                    price=item.price_without_vat,       # ‚¨ÖÔ∏è –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
                    warehouse=self.document.warehouse,
                    direction='in',
                    visible=True
                )
                self.logger.log_event("receipt_item_posted",
                    f"–ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è: {item.product.name} x {item.quantity} –ø–æ —Å–æ–±—ñ–≤–∞—Ä—Ç–æ—Å—Ç—ñ {item.price_without_vat}")

            self.document.status = 'posted'
            self.document.save()
            self.logger.log_event("receipt_posted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

            AutoMoneyDocumentService.create_from_document(self.document)

        except Exception as e:
            self.logger.log_error("receipt_posting_failed", e, {
                "doc_id": self.document.id,
                "doc_number": self.document.doc_number,
                "items_count": self.document.items.count()
            })
            raise

    def unpost(self):
        try:
            if self.document.status != 'posted':
                self.logger.log_business_logic_error(
                    "document_not_posted",
                    "–°–ø—Ä–æ–±–∞ —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                    {"doc_number": self.document.doc_number, "current_status": self.document.status}
                )
                raise DocumentNotPostedException()

            DocumentValidator(self.document).check_can_unpost()

            Operation.objects.filter(document=self.document).delete()
            self.logger.log_event("receipt_unposted", f"–û–ø–µ—Ä–∞—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞ {self.document.doc_number} –≤–∏–¥–∞–ª–µ–Ω—ñ")

            self.document.status = 'draft'
            self.document.save()
            self.logger.log_event("receipt_draft", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —á–µ—Ä–Ω–µ—Ç–∫—É")

        except Exception as e:
            self.logger.log_error("receipt_unposting_failed", e, {
                "doc_id": self.document.id,
                "doc_number": self.document.doc_number
            })
            raise


class ReturnToSupplierService(BaseDocumentService):
    def post(self):
        if self.document.status == 'posted':
            self.logger.log_event("already_posted",
                                  f"–°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {self.document.doc_number}")
            raise DocumentAlreadyPostedException()

        DocumentValidator(self.document).check_can_post()

        source = self.document.source_document
        if not source or source.doc_type != 'receipt':
            raise MissingSourceDocumentError("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –¥—ñ–π—Å–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –ü–æ—Å—Ç—É–ø–ª–µ–Ω–Ω—è —è–∫ –¥–∂–µ—Ä–µ–ª–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è.")

        for item in self.document.items.all():
            converted_qty = convert_to_base(item.product, item.unit, item.quantity)
            apply_vat(item)
            item.converted_quantity = converted_qty
            item.save(update_fields=["converted_quantity"])

            total_received = Operation.objects.filter(
                document=source,
                product=item.product,
                direction='in',
                visible=True
            ).aggregate(total=Sum('quantity'))['total'] or 0

            total_returned = Operation.objects.filter(
                document__doc_type='return_to_supplier',
                document__source_document=source,
                product=item.product,
                direction='out'
            ).aggregate(total=Sum('quantity'))['total'] or 0

            max_returnable = total_received - total_returned

            if item.quantity > max_returnable:
                raise InvalidReturnQuantityError(
                    f"–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è '{item.product.name}' –ø–µ—Ä–µ–≤–∏—â—É—î –¥–æ—Å—Ç—É–ø–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å. –û—Ç—Ä–∏–º–∞–Ω–æ: {total_received}, –ø–æ–≤–µ—Ä–Ω—É—Ç–æ: {total_returned}, –¥–æ–∑–≤–æ–ª–µ–Ω–æ: {max_returnable}."
                )

            Operation.objects.create(
                document=self.document,
                product=item.product,
                quantity=converted_qty,
                price=item.price,
                warehouse=self.document.warehouse,
                direction='out',
                visible=True
            )
            self.logger.log_event("return_supplier_item", f"–ü–æ–≤–µ—Ä–Ω–µ–Ω–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É: {item.product.name} x {item.quantity}")

        self.document.status = 'posted'
        self.document.save()
        self.logger.log_event("return_supplier_posted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

    def unpost(self):
        if self.document.status != 'posted':
            raise DocumentNotPostedException()

        DocumentValidator(self.document).check_can_unpost()

        Operation.objects.filter(document=self.document).delete()
        self.logger.log_event("return_supplier_unposted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

        self.document.status = 'draft'
        self.document.save()
        self.logger.log_event("return_supplier_draft", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —á–µ—Ä–Ω–µ—Ç–∫—É")


class TransferService(BaseDocumentService):
    def post(self):
        if self.document.status == 'posted':
            self.logger.log_event("already_posted",
                                  f"–°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {self.document.doc_number}")
            raise DocumentAlreadyPostedException()

        DocumentValidator(self.document).check_can_post()
        target_warehouse = self.document.target_warehouse

        for item in self.document.items.all():
            stock = FIFOStockManager.get_available_stock(
                product=item.product,
                warehouse=self.document.warehouse,
                firm=self.document.firm  # ‚¨ÖÔ∏è –¥–æ–¥–∞–Ω–æ
            )
            if stock < item.quantity:
                raise InsufficientStockError(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–∞–ª–∏—à–∫—É –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è: {item.product.name}. –Ñ: {stock}, –ø–æ—Ç—Ä—ñ–±–Ω–æ: {item.quantity}"
                )

        for item in self.document.items.all():
            converted_qty = convert_to_base(item.product, item.unit, item.quantity)
            apply_vat(item)
            item.converted_quantity = converted_qty
            item.save(update_fields=["converted_quantity"])

            Operation.objects.create(
                document=self.document,
                product=item.product,
                quantity=converted_qty,
                price=item.price,
                warehouse=self.document.warehouse,
                direction='out',
                visible=True
            )
            Operation.objects.create(
                document=self.document,
                product=item.product,
                quantity=converted_qty,
                price=item.price,
                warehouse=target_warehouse,
                direction='in',
                visible=True
            )
            self.logger.log_event("transfer_item", f"–ü–µ—Ä–µ–º—ñ—â–µ–Ω–æ {item.product.name} x {item.quantity} –∑—ñ —Å–∫–ª–∞–¥—É {self.document.warehouse.name} –¥–æ {target_warehouse.name}")

        self.document.status = 'posted'
        self.document.save()
        self.logger.log_event("transfer_posted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

    def unpost(self):
        if self.document.status != 'posted':
            raise DocumentNotPostedException()

        DocumentValidator(self.document).check_can_unpost()
        Operation.objects.filter(document=self.document).delete()
        self.document.status = 'draft'
        self.document.save()
        self.logger.log_event("transfer_unposted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ")


class SaleService(BaseDocumentService):
    def post(self):
        if self.document.status == 'posted':
            self.logger.log_event("already_posted",
                                  f"–°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {self.document.doc_number}")
            raise DocumentAlreadyPostedException()

        DocumentValidator(self.document).check_can_post()

        for item in self.document.items.all():
            converted_qty = convert_to_base(item.product, item.unit, item.quantity)
            item.converted_quantity = converted_qty

            if item.price_with_vat and not item.vat_amount:
                apply_vat(item, mode="from_price_with_vat")
            else:
                apply_vat(item)

            item.save(update_fields=["converted_quantity"])

            # ‚¨áÔ∏è –ù–û–í–ê –õ–û–ì–Ü–ö–ê: FIFO –∑ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–º–∏ —Ü—ñ–Ω–∞–º–∏
            total_cost = FIFOStockManager.sell_fifo(
                document=self.document,
                product=item.product,
                warehouse=self.document.warehouse,
                quantity=converted_qty,
                sale_price=item.price_without_vat  # ‚¨ÖÔ∏è –ü–µ—Ä–µ–¥–∞—î–º–æ —Ü—ñ–Ω—É –ø—Ä–æ–¥–∞–∂—É
            )

            # –†–∞—Ö—É—î–º–æ –ø—Ä–∏–±—É—Ç–æ–∫
            total_sale = item.price_without_vat * converted_qty
            profit = total_sale - total_cost

            self.logger.log_event("sale_item",
                                  f"–†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {item.product.name} x {item.quantity}. "
                                  f"–ü—Ä–æ–¥–∞–∂—ñ: {total_sale}, –°–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å: {total_cost}, –ü—Ä–∏–±—É—Ç–æ–∫: {profit}")

        self.document.status = 'posted'
        self.document.save()
        self.logger.log_event("sale_posted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

        AccountingService(self.document).generate_entries()
        AutoMoneyDocumentService.create_from_document(self.document)

    def _auto_create_payment(self):
        payment_type = self.document.payment_type
        if not payment_type or payment_type.name not in ["–ì–æ—Ç—ñ–≤–∫–∞", "–ë–µ–∑–≥–æ—Ç—ñ–≤–∫–∞"]:
            return

        doc_type = 'cash_income' if payment_type.name == "–ì–æ—Ç—ñ–≤–∫–∞" else 'bank_income'

        from settlements.models import Account
        account = Account.objects.filter(
            company=self.document.company,
            type='cash' if doc_type == 'cash_income' else 'bank'
        ).first()

        if not account:
            return

        amount = sum(item.quantity * item.price for item in self.document.items.all())

        money_doc = MoneyDocument.objects.create(
            doc_type=doc_type,
            company=self.document.company,
            firm=self.document.firm,
            comment=f"–û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é {self.document.doc_number}",
            source_document=self.document,
            customer=self.document.customer,
            account=account,
            amount=amount,
            status='posted'
        )

        MoneyOperation.objects.create(
            document=money_doc,
            amount=amount,
            direction='in',
            account=account,
            source_document=self.document,
            customer=self.document.customer,
            visible=True
        )

        from settlements.models import MoneyLedgerEntry
        MoneyLedgerEntry.objects.create(
            document=money_doc,
            date=money_doc.date,
            debit_account=301,
            credit_account=361,
            amount=amount,
            comment=f"–ê–≤—Ç–æ–ø—Ä–æ–≤–æ–¥–∫–∞ –ø–æ {money_doc.doc_number}",
            customer=self.document.customer
        )

        self.logger.log_event("auto_payment_created", f"–°—Ç–≤–æ—Ä–µ–Ω–æ –æ–ø–ª–∞—Ç—É {money_doc.doc_number}")



class ReturnFromClientService(BaseDocumentService):
    def post(self):
        if self.document.status == 'posted':
            self.logger.log_event("already_posted",
                                  f"–°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {self.document.doc_number}")
            raise DocumentAlreadyPostedException()

        DocumentValidator(self.document).check_can_post()

        source = self.document.source_document

        if not source or source.doc_type != 'sale':
            raise MissingSourceDocumentError("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó, –∑ —è–∫–æ–≥–æ –∫–ª—ñ—î–Ω—Ç –ø–æ–≤–µ—Ä—Ç–∞—î —Ç–æ–≤–∞—Ä.")

        for item in self.document.items.all():
            converted_qty = convert_to_base(item.product, item.unit, item.quantity)
            apply_vat(item)
            item.converted_quantity = converted_qty
            item.save(update_fields=["converted_quantity"])

            source_item = source.items.filter(product=item.product).first()
            if not source_item:
                raise ValidationError(f"–¢–æ–≤–∞—Ä '{item.product.name}' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –¥–æ–∫—É–º–µ–Ω—Ç—ñ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó.")

            total_returned = Operation.objects.filter(
                document__doc_type='return_from_client',
                document__source_document=source,
                product=item.product,
                direction='in'
            ).aggregate(total=Sum('quantity'))['total'] or 0

            max_returnable = source_item.quantity - total_returned

            if item.quantity > max_returnable:
                raise InvalidReturnQuantityError(
                    f"–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è '{item.product.name}' –ø–µ—Ä–µ–≤–∏—â—É—î —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å. "
                    f"–ü—Ä–æ–¥–∞–Ω–æ: {source_item.quantity}, –≤–∂–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ: {total_returned}, "
                    f"–¥–æ–∑–≤–æ–ª–µ–Ω–æ: {max_returnable}."
                )

            Operation.objects.create(
                document=self.document,
                product=item.product,
                quantity=converted_qty,
                price=item.price,
                warehouse=self.document.warehouse,
                direction='in',
                visible=True
            )
            self.logger.log_event("return_client_item", f"–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞: {item.product.name} x {item.quantity}")

        self.document.status = 'posted'
        self.document.save()
        self.logger.log_event("return_client_posted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

    def unpost(self):
        if self.document.status != 'posted':
            raise DocumentNotPostedException()

        DocumentValidator(self.document).check_can_unpost()

        Operation.objects.filter(document=self.document).delete()
        self.document.status = 'draft'
        self.document.save()
        self.logger.log_event("return_client_unposted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ")


class InventoryService(BaseDocumentService):
    def post(self):
        if self.document.status == 'posted':
            self.logger.log_event("already_posted",
                                  f"–°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {self.document.doc_number}")
            raise DocumentAlreadyPostedException()

        DocumentValidator(self.document).check_can_post()

        for item in self.document.items.all():
            converted_qty = convert_to_base(item.product, item.unit, item.quantity)
            apply_vat(item)
            item.converted_quantity = converted_qty
            item.save(update_fields=["converted_quantity"])

            product = item.product
            warehouse = self.document.warehouse
            firm = self.document.firm

            incoming = Operation.objects.filter(
                product=product,
                warehouse=warehouse,
                document__firm=firm,
                direction='in',
                visible=True
            ).aggregate(total=Sum('quantity'))['total'] or 0

            outgoing = Operation.objects.filter(
                product=product,
                warehouse=warehouse,
                document__firm=firm,
                direction='out',
                visible=True
            ).aggregate(total=Sum('quantity'))['total'] or 0

            balance = incoming - outgoing
            diff = converted_qty - balance

            if diff == 0:
                continue

            Operation.objects.create(
                document=self.document,
                product=product,
                quantity=abs(diff),
                price=item.price,
                warehouse=warehouse,
                direction='in' if diff > 0 else 'out',
                visible=True
            )
            self.logger.log_event("inventory_adjustment", f"–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—è: {product.name}, –∑–º—ñ–Ω–∞: {diff}")

        self.document.status = 'posted'
        self.document.save()
        self.logger.log_event("inventory_posted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

    def unpost(self):
        if self.document.status != 'posted':
            raise DocumentNotPostedException()

        DocumentValidator(self.document).check_can_unpost()

        Operation.objects.filter(document=self.document).delete()
        self.document.status = 'draft'
        self.document.save()
        self.logger.log_event("inventory_unposted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ")




class StockInDocumentService:
    def __init__(self, document):
        self.document = document

    def post(self):
        if self.document.status == 'posted':
            raise DocumentAlreadyPostedException()

        with transaction.atomic():
            for item in self.document.items.all():
                converted_qty = convert_to_base(item.product, item.unit, item.quantity)
                apply_vat(item)
                item.converted_quantity = converted_qty
                item.save(update_fields=["converted_quantity"])

                Operation.objects.create(
                    document=self.document,
                    product=item.product,
                    quantity=converted_qty,
                    price=item.price,
                    warehouse=self.document.warehouse,
                    direction='in',
                    visible=True
                )

            self.document.status = 'posted'
            self.document.save()

    def unpost(self):
        if self.document.status != 'posted':
            raise ValidationError("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–π.")

        with transaction.atomic():
            operations = Operation.objects.filter(document=self.document, direction='in')

            for op in operations:
                used_qty = Operation.objects.filter(
                    source_operation=op,
                    direction='out',
                    visible=True
                ).count()

                if used_qty > 0:
                    raise ValidationError(f"–ü–∞—Ä—Ç—ñ—è {op.id} –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ —É —Å–ø–∏—Å–∞–Ω–Ω—ñ. –ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–ø—Ä–æ–≤–µ—Å—Ç–∏.")

            operations.delete()
            self.document.status = 'draft'
            self.document.save()


class ConversionDocumentService(BaseDocumentService):
    def post(self):
        if self.document.status == 'posted':
            self.logger.log_event("already_posted",
                                  f"–°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {self.document.doc_number}")
            raise DocumentAlreadyPostedException()

        DocumentValidator(self.document).check_can_post()

        # ‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ source —ñ target —Ç–æ–≤–∞—Ä—ñ–≤
        source_items = self.document.items.filter(role='source')
        target_items = self.document.items.filter(role='target')

        if not source_items.exists():
            raise ConversionValidationError("–î–æ–∫—É–º–µ–Ω—Ç —Ñ–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä-–¥–∂–µ—Ä–µ–ª–æ (source)")

        if not target_items.exists():
            raise ConversionValidationError("–î–æ–∫—É–º–µ–Ω—Ç —Ñ–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä-—Ä–µ–∑—É–ª—å—Ç–∞—Ç (target)")

        # ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è source —Ç–æ–≤–∞—Ä—ñ–≤
        for item in source_items:
            converted_qty = convert_to_base(item.product, item.unit, item.quantity)
            stock = FIFOStockManager.get_available_stock(
                product=item.product,
                warehouse=self.document.warehouse,
                firm=self.document.firm
            )
            if stock < converted_qty:
                raise InsufficientStockError(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–∞–ª–∏—à–∫—É –¥–ª—è —Ñ–∞—Å—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É '{item.product.name}'. "
                    f"–Ñ: {stock}, –ø–æ—Ç—Ä—ñ–±–Ω–æ: {converted_qty}"
                )

        with transaction.atomic():
            # ‚¨áÔ∏è –ù–û–í–ê –õ–û–ì–Ü–ö–ê –§–ê–°–£–í–ê–ù–ù–Ø –ó –°–û–ë–Ü–í–ê–†–¢–Ü–°–¢–Æ
            total_source_cost = Decimal('0')
            total_target_quantity = Decimal('0')

            # 1Ô∏è‚É£ –°–ø–æ—á–∞—Ç–∫—É —Ä–∞—Ö—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å source —Ç–æ–≤–∞—Ä—ñ–≤
            for item in source_items:
                converted_qty = convert_to_base(item.product, item.unit, item.quantity)

                # –û—Ç—Ä–∏–º—É—î–º–æ —Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å –¥–ª—è —Ü—ñ—î—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
                item_cost = FIFOStockManager.get_cost_price_for_quantity(
                    item.product, self.document.warehouse, self.document.firm, converted_qty
                )

                total_source_cost += item_cost * converted_qty

                self.logger.log_event("conversion_source_calculated",
                                      f"Source —Ç–æ–≤–∞—Ä {item.product.name}: –∫—ñ–ª—å–∫—ñ—Å—Ç—å {converted_qty}, —Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å {item_cost}")

            # 2Ô∏è‚É£ –†–∞—Ö—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å target —Ç–æ–≤–∞—Ä—ñ–≤
            for item in target_items:
                converted_qty = convert_to_base(item.product, item.unit, item.quantity)
                total_target_quantity += converted_qty

            # 3Ô∏è‚É£ –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—ñ target —Ç–æ–≤–∞—Ä—É
            if total_target_quantity > 0:
                target_unit_cost = total_source_cost / total_target_quantity
            else:
                raise ConversionValidationError("–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å target —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ 0")

            # 4Ô∏è‚É£ –°–ø–∏—Å—É—î–º–æ source —Ç–æ–≤–∞—Ä–∏ –ø–æ FIFO
            for item in source_items:
                converted_qty = convert_to_base(item.product, item.unit, item.quantity)
                apply_vat(item)
                item.converted_quantity = converted_qty
                item.save(update_fields=["converted_quantity"])

                # –°–ø–∏—Å—É—î–º–æ —á–µ—Ä–µ–∑ FIFO (—Å—Ç–≤–æ—Ä—é—î –æ–ø–µ—Ä–∞—Ü—ñ—ó —Å–ø–∏—Å–∞–Ω–Ω—è)
                FIFOStockManager.sell_fifo(
                    document=self.document,
                    product=item.product,
                    warehouse=self.document.warehouse,
                    quantity=converted_qty
                )

            # 5Ô∏è‚É£ –û–ø—Ä–∏–±—É—Ç–∫–æ–≤—É—î–º–æ target —Ç–æ–≤–∞—Ä–∏ –∑ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ—é —Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—é
            for item in target_items:
                converted_qty = convert_to_base(item.product, item.unit, item.quantity)
                apply_vat(item)
                item.converted_quantity = converted_qty
                item.save(update_fields=["converted_quantity"])

                Operation.objects.create(
                    document=self.document,
                    product=item.product,
                    quantity=converted_qty,
                    cost_price=target_unit_cost,  # ‚¨ÖÔ∏è –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ —Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å
                    price=target_unit_cost,  # ‚¨ÖÔ∏è –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
                    warehouse=self.document.warehouse,
                    direction='in',
                    visible=True
                )

            self.document.status = 'posted'
            self.document.save()

            self.logger.log_event("conversion_posted",
                                  f"–§–∞—Å—É–≤–∞–Ω–Ω—è {self.document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ. "
                                  f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å source: {total_source_cost}, "
                                  f"–°–æ–±—ñ–≤–∞—Ä—Ç—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—ñ target: {target_unit_cost}")

    def unpost(self):
        if self.document.status != 'posted':
            raise DocumentNotPostedException()

        DocumentValidator(self.document).check_can_unpost()
        Operation.objects.filter(document=self.document).delete()
        self.document.status = 'draft'
        self.document.save()
        self.logger.log_event("conversion_unposted", f"–§–∞—Å—É–≤–∞–Ω–Ω—è {self.document.doc_number} —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ")


class InventoryInService(BaseDocumentService):
    """–°–µ—Ä–≤—ñ—Å –æ–ø—Ä–∏–±—É—Ç–∫—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤"""

    def post(self):
        if self.document.status == 'posted':
            self.logger.log_event("already_posted",
                                  f"–°–ø—Ä–æ–±–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {self.document.doc_number}")
            raise DocumentAlreadyPostedException()

        DocumentValidator(self.document).check_can_post()

        for item in self.document.items.all():
            converted_qty = convert_to_base(item.product, item.unit, item.quantity)

            if item.price_with_vat and not item.vat_amount:
                apply_vat(item, mode="from_price_with_vat")
            else:
                apply_vat(item)

            item.converted_quantity = converted_qty
            item.save(update_fields=["converted_quantity"])

            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é –æ–ø—Ä–∏–±—É—Ç–∫—É–≤–∞–Ω–Ω—è
            Operation.objects.create(
                document=self.document,
                product=item.product,
                warehouse=self.document.warehouse,
                direction='in',
                quantity=converted_qty,
                cost_price=item.price_without_vat or item.price,
                total_cost=(item.price_without_vat or item.price) * converted_qty,
                price=item.price_without_vat or item.price,  # –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
                visible=True
            )

            self.logger.log_event("inventory_in_item",
                                  f"–û–ø—Ä–∏–±—É—Ç–∫—É–≤–∞–Ω–Ω—è: {item.product.name} x {item.quantity} –ø–æ —Å–æ–±—ñ–≤–∞—Ä—Ç–æ—Å—Ç—ñ {item.price_without_vat or item.price}")

        self.document.status = 'posted'
        self.document.save()
        self.logger.log_event("inventory_in_posted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")

    def unpost(self):
        if self.document.status != 'posted':
            raise DocumentNotPostedException()

        DocumentValidator(self.document).check_can_unpost()

        Operation.objects.filter(document=self.document).delete()

        self.document.status = 'draft'
        self.document.save()
        self.logger.log_event("inventory_in_unposted", f"–î–æ–∫—É–º–µ–Ω—Ç {self.document.doc_number} —Ä–æ–∑–ø—Ä–æ–≤–µ–¥–µ–Ω–æ")