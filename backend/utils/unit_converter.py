from backend.models import ProductUnitConversion

def convert_to_base(product, from_unit, quantity):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç—É—î quantity –∑ from_unit —É –±–∞–∑–æ–≤—É –æ–¥–∏–Ω–∏—Ü—é —Ç–æ–≤–∞—Ä—É (product.unit).
    –Ø–∫—â–æ –∫–æ–Ω–≤–µ—Ä—Å—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î quantity —è–∫ —î (–≤–≤–∞–∂–∞—î, —â–æ –æ–¥–∏–Ω–∏—Ü—ñ –∑–±—ñ–≥–∞—é—Ç—å—Å—è).
    """
    if from_unit == product.unit:
        return quantity  # –û–¥–∏–Ω–∏—Ü—ñ –æ–¥–Ω–∞–∫–æ–≤—ñ ‚Äî –Ω–µ —Ç—Ä–µ–±–∞ –Ω—ñ—á–æ–≥–æ —Ä–∞—Ö—É–≤–∞—Ç–∏

    # –°–ø—Ä–æ–±–∞ –ø—Ä—è–º–æ—ó –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó
    direct = ProductUnitConversion.objects.filter(
        product=product,
        from_unit=from_unit,
        to_unit=product.unit
    ).first()
    if direct:
        return quantity * direct.factor

    # –°–ø—Ä–æ–±–∞ –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó
    reverse = ProductUnitConversion.objects.filter(
        product=product,
        from_unit=product.unit,
        to_unit=from_unit
    ).first()
    if reverse and reverse.factor != 0:
        return quantity / reverse.factor

    # üö® –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω–≤–µ—Ä—Å—ñ—é ‚Äî –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º–æ —è–∫ —î
    return quantity
