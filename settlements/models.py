from decimal import Decimal
from django.db import models
from backend.models import Company, Firm, Supplier, Customer, Document, PaymentType

MONEY_DOC_TYPES = [
    ('cash_income', '–ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –≥–æ—Ç—ñ–≤–∫–∏'),
    ('bank_income', '–ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫'),
    ('cash_outcome', '–í–∏—Ç—Ä–∞—Ç–∞ –≥–æ—Ç—ñ–≤–∫–∏'),
    ('bank_outcome', '–í–∏—Ç—Ä–∞—Ç–∞ –∑ —Ä–∞—Ö—É–Ω–∫—É'),
    ('supplier_debt', '–ë–æ—Ä–≥ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É'),
]

ACCOUNT_TYPE_CHOICES = [
    ('cash', '–ì–æ—Ç—ñ–≤–∫–∞'),
    ('bank', '–ë–∞–Ω–∫'),
]

class Account(models.Model):
    company = models.ForeignKey(Company, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    type = models.CharField(max_length=10, choices=ACCOUNT_TYPE_CHOICES)

    class Meta:
        verbose_name = '–ö–∞—Å–∞-–ë–∞–Ω–∫'
        verbose_name_plural = '–ö–∞—Å–∏-–ë–∞–Ω–∫–∏'


class MoneyDocument(models.Model):
    company = models.ForeignKey(Company, on_delete=models.CASCADE)
    firm = models.ForeignKey(Firm, on_delete=models.CASCADE)
    doc_type = models.CharField(max_length=30, choices=MONEY_DOC_TYPES)
    doc_number = models.CharField(max_length=50, unique=True, blank=True, null=True)  # ‚û°Ô∏è –î–æ–¥–∞—Ç–∏ —Ü–µ –ø–æ–ª–µ
    comment = models.TextField(blank=True, null=True)
    status = models.CharField(max_length=20, default='draft')  # draft / posted
    date = models.DateTimeField(auto_now_add=True)
    account = models.ForeignKey(
        'settlements.Account',
        on_delete=models.CASCADE,
        verbose_name='–†–∞—Ö—É–Ω–æ–∫',
        null=True,
        blank=True
    )
    supplier = models.ForeignKey('backend.Supplier', on_delete=models.SET_NULL, null=True, blank=True)
    source_document = models.ForeignKey('backend.Document', on_delete=models.SET_NULL, null=True, blank=True)
    customer = models.ForeignKey('backend.Customer', on_delete=models.SET_NULL, null=True, blank=True)
    vat_amount = models.DecimalField(max_digits=12, decimal_places=2, default=0)
    total_without_vat = models.DecimalField(max_digits=12, decimal_places=2, default=0)
    total_with_vat = models.DecimalField(max_digits=12, decimal_places=2, default=0)
    vat_20 = models.DecimalField(max_digits=12, decimal_places=2, default=0)
    vat_7 = models.DecimalField(max_digits=12, decimal_places=2, default=0)
    vat_0 = models.DecimalField(max_digits=12, decimal_places=2, default=0)
    amount = models.DecimalField("–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏", max_digits=12, decimal_places=2, default=Decimal("0.00"))

    def save(self, *args, **kwargs):
        if not self.doc_number:
            prefix = {
                'cash_income': '801',
                'bank_income': '802',
                'cash_outcome': '803',
                'bank_outcome': '804',
                'supplier_debt': '805',
            }.get(self.doc_type, '899')
            last_doc = MoneyDocument.objects.filter(doc_type=self.doc_type).order_by('-id').first()
            last_number = int(last_doc.doc_number.split('-')[-1]) if last_doc and last_doc.doc_number else 0
            self.doc_number = f"{prefix}-{str(last_number + 1).zfill(5)}"
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.get_doc_type_display()} #{self.doc_number}"

    class Meta:
        verbose_name = '–ì—Ä–æ—à–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç'
        verbose_name_plural = '–ì—Ä–æ—à–æ–≤—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏'

class MoneyOperation(models.Model):
    document = models.ForeignKey(
        MoneyDocument,
        on_delete=models.CASCADE,
        null=True,  # üß† —Ü–µ —Ç–µ, —á–æ–≥–æ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î
        blank=True
    )
    account = models.ForeignKey(Account, on_delete=models.CASCADE, null=True, blank=True)
    supplier = models.ForeignKey(Supplier, on_delete=models.SET_NULL, null=True, blank=True)
    customer = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True, blank=True)
    source_document = models.ForeignKey(Document, on_delete=models.SET_NULL, null=True, blank=True)
    amount = models.DecimalField(max_digits=12, decimal_places=2)
    direction = models.CharField(max_length=10)  # 'in' –∞–±–æ 'out'
    visible = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = '–ì—Ä–æ—à–æ–≤–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è'
        verbose_name_plural = '–ì—Ä–æ—à–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó'



class Contract(models.Model):
    supplier = models.ForeignKey(Supplier, on_delete=models.CASCADE, null=True, blank=True, verbose_name='–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫')
    client = models.ForeignKey(Customer, on_delete=models.CASCADE, null=True, blank=True, verbose_name='–ö–ª—ñ—î–Ω—Ç')
    name = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞ –¥–æ–≥–æ–≤–æ—Ä—É', unique=True)
    payment_type = models.ForeignKey(PaymentType, on_delete=models.SET_NULL, null=True, verbose_name='–¢–∏–ø –æ–ø–ª–∞—Ç–∏')
    account = models.ForeignKey(Account, on_delete=models.SET_NULL, null=True, verbose_name='–†–∞—Ö—É–Ω–æ–∫')
    doc_file = models.FileField(upload_to='contracts/', null=True, blank=True, verbose_name='–§–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä—É')
    contract_type = models.CharField(
        max_length=50,
        choices=[('partial', '–û–ø–ª–∞—Ç–∞ —á–∞—Å—Ç–∏–Ω–∞–º–∏'), ('prepaid', '–û–ø–ª–∞—Ç–∞ –Ω–∞–ø–µ—Ä–µ–¥')],
        verbose_name='–¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä—É'
    )
    is_active = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–Ω–∏–π')
    status = models.CharField(
        max_length=20,
        choices=[('draft', '–ß–µ—Ä–Ω–µ—Ç–∫–∞'), ('active', '–î—ñ—é—á–∏–π'), ('cancelled', '–°–∫–∞—Å–æ–≤–∞–Ω–∏–π')],
        default='draft',
        verbose_name='–°—Ç–∞—Ç—É—Å'
    )

    def save(self, *args, **kwargs):
        if not self.name:
            prefix = 'CTR'
            last = Contract.objects.filter(name__startswith=prefix).order_by('-id').first()
            number = int(last.name.split('-')[-1]) + 1 if last else 1
            self.name = f"{prefix}-{str(number).zfill(5)}"
        super().save(*args, **kwargs)

    def __str__(self):
        side = self.supplier.name if self.supplier else self.client.name
        return f"{self.name} ({side})"

    class Meta:
        verbose_name = "–î–æ–≥–æ–≤—ñ—Ä"
        verbose_name_plural = "–î–æ–≥–æ–≤–æ—Ä–∏"



class MoneyLedgerEntry(models.Model):
    document = models.ForeignKey('MoneyDocument', on_delete=models.CASCADE)
    date = models.DateTimeField(auto_now_add=True)

    debit_account = models.CharField(max_length=100)   # –ö–æ–¥ –∞–±–æ —ñ–º º—è —Ä–∞—Ö—É–Ω–∫—É
    credit_account = models.CharField(max_length=100)

    amount = models.DecimalField(max_digits=12, decimal_places=2)

    supplier = models.ForeignKey('backend.Supplier', null=True, blank=True, on_delete=models.SET_NULL)
    customer = models.ForeignKey('backend.Customer', null=True, blank=True, on_delete=models.SET_NULL)

    comment = models.TextField(blank=True, null=True)

    class Meta:
        verbose_name = "–ü—Ä–æ–≤–æ–¥–∫–∞"
        verbose_name_plural = "–ü—Ä–æ–≤–æ–¥–∫–∏"

    def __str__(self):
        return f"{self.debit_account} ‚¨ÖÔ∏è {self.amount} ‚¨ÖÔ∏è {self.credit_account}"
